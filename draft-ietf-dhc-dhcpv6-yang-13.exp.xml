<?xml version='1.0' encoding='utf-8'?>
<?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
<?rfc strict="yes" ?>
<?rfc toc="yes"?>
<?rfc tocdepth="4"?>
<?rfc symrefs="yes"?>
<?rfc sortrefs="yes" ?>
<?rfc compact="yes" ?>
<?rfc subcompact="no" ?>
<!DOCTYPE rfc SYSTEM "rfc2629-xhtml.ent">
<rfc xmlns:xi="http://www.w3.org/2001/XInclude" category="std" submissionType="IETF" docName="draft-ietf-dhc-dhcpv6-yang-13" ipr="trust200902" version="3">
  <!-- xml2rfc v2v3 conversion 2.30.0 -->
  <front>
    <title abbrev="DHCPv6 YANG Model">YANG Data Model for DHCPv6 
      Configuration</title>
    <seriesInfo name="Internet-Draft" value="draft-ietf-dhc-dhcpv6-yang-13"/>
    <author fullname="Yong Cui" initials="Y." surname="Cui">
      <organization>Tsinghua University</organization>
      <address>
        <postal>
          <street/>
          <city>Beijing</city>
          <code>100084</code>
          <country>P.R. China</country>
        </postal>
        <phone>+86-10-6260-3059</phone>
        <email>cuiyong@tsinghua.edu.cn</email>
      </address>
    </author>
    <author fullname="Linhui Sun" initials="L." surname="Sun">
      <organization>Tsinghua University</organization>
      <address>
        <postal>
          <street/>
          <city>Beijing</city>
          <code>100084</code>
          <country>P.R. China</country>
        </postal>
        <phone>+86-10-6278-5822</phone>
        <email>lh.sunlinh@gmail.com</email>
      </address>
    </author>
    <author fullname="Ian Farrer" initials="I.F." surname="Farrer">
      <organization>Deutsche Telekom AG</organization>
      <address>
        <postal>
          <street>TAI, Landgrabenweg 151</street>
          <city>Bonn</city>
          <code>53227</code>
          <country>Germany</country>
        </postal>
        <email>ian.farrer@telekom.de</email>
      </address>
    </author>
    <author fullname="Sladjana Zechlin" initials="S.Z." surname="Zechlin">
      <organization>Deutsche Telekom AG</organization>
      <address>
        <postal>
          <street>CTO-IPT, Landgrabenweg 151</street>
          <city>Bonn</city>
          <code>53227</code>
          <country>Germany</country>
        </postal>
        <email>sladjana.zechlin@telekom.de</email>
      </address>
    </author>
    <author fullname="Zihao He" initials="Z." surname="He">
      <organization>Tsinghua University</organization>
      <address>
        <postal>
          <street/>
          <city>Beijing</city>
          <code>100084</code>
          <country>P.R. China</country>
        </postal>
        <phone>+86-10-6278-5822</phone>
        <email>hezihao9512@gmail.com</email>
      </address>
    </author>
    <author fullname="Michal Nowikowski" initials="M.N." surname="Nowikowski">
      <organization>Internet Systems Consortium</organization>
      <address>
        <postal>
          <street/>
          <city>Gdansk</city>
          <country>Poland</country>
        </postal>
        <email>godfryd@isc.org</email>
      </address>
    </author>
    <date year="2020"/>
    <workgroup>DHC Working Group</workgroup>
    <abstract>
      <t>This document describes YANG data modules for the configuration 
        and management of DHCPv6 servers, relays, and clients.
      </t>
    </abstract>
    <note>
      <name>Requirements Language</name>
      <t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
        "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and
        "OPTIONAL" in this document are to be interpreted as described in
        BCP 14 <xref target="RFC2119"/> <xref target="RFC8174"/> when, and
        only when, they appear in all capitals, as shown here.</t>
    </note>
  </front>
  <middle>
    <section anchor="introduction">
      <name>Introduction</name>
      <t>DHCPv6 <xref target="RFC8415"/> is widely used for supplying
        configuration and other relevant parameters to clients in IPv6 
        networks. This document defines YANG modules for the 
        configuration and management of DHCPv6 servers, relays and 
        clients. Separate 'element' modules are defined for each of 
        these. There is an additional module per-element defining DHCP 
        options which are relevant for that element (taken from the 
        options defined in <xref target="RFC8415"/>.
      </t>
      <t>Additionally, a 'common' module contains typedefs and
        groupings used by all of the element modules.
      </t>
      <t>It is worth noting that as DHCPv6 is itself a client 
        configuration protocol, it is not the intention of this document 
        to provide a replacement for the allocation of DHCPv6 assigned 
        addressing and parameters by using NETCONF/YANG.  The DHCPv6 
        client module is intended for the configuration and monitoring 
        of the DHCPv6 client function and does not play a part in the 
        normal DHCPv6 message flow.
      </t>
      <section>
        <name>Scope</name>
        <t><xref target="RFC8415"/> describes the current version of the 
          DHCPv6 base protocol specification. A large number of 
          additional specifications have also been published, extending 
          DHCPv6 element functionality and adding new options. The YANG 
          modules contained in this document do not attempt to capture 
          all of these extensions and additions, rather to model the 
          DHCPv6 functions and options covered in 
          <xref target="RFC8415"/>. A focus has also been given on the 
          extensibility of the modules so that it is easy to augment 
          in additional functionality as required by a particular 
          implementation or deployment scenario.
        </t>
      </section>
      <section>
        <name>Extensibility of the DHCPv6 Server YANG Module</name>
        <t>The modules in this document only attempt to model DHCPv6 
          specific behavior and do not cover the configuration and 
          management of functionality relevant for specific server 
          implementations. The level of variance between implementations 
          is too great to attempt to standardize in a way that is useful 
          without being restrictive.
        </t>
        <t>However, it is recognized that implementation specific 
          configuration and management is also an essential part of DHCP 
          deployment and operations. To resolve this,
          <xref target="vendor-specific-configuration-example"/> 
          contains an example YANG module for the configuration of 
          implementation specific functions, illustrating how this 
          functionality can be augmented into the main 
          'ietf-dhcpv6-server.yang' module.
        </t>
        <t>In DHCPv6 the concept of 'class selection' for messages 
          received by the server is common. This is the identification 
          and classification of messages based on a number of parameters 
          so that the correct provisioning information can be supplied. 
          For example, allocating a prefix from the correct pool, or 
          supplying a set of options relevant for a specific vendor's 
          client implementation.  During the development of this 
          document, research has been carried out into a number of 
          vendor's class selection implementations and the findings were 
          that while this function is common to all, the method for
          configuring and implementing this function differs greatly. 
          Therefore, configuration of the class selection function has 
          been omitted from the DHCPv6 server module to allow 
          implementors to define their own suitable YANG module.
          <xref target="class-selector-example"/> provides an
          example of this, to demonstrate how this is can be 
          integrated with the main 'ietf-dhcpv6-server.yang' module.
        </t>
        <section>
          <name>DHCPv6 Option Definitions</name>
          <t>
            A large number of DHCPv6 options have been created in 
            addition to those defined in <xref target="RFC8415"/>. As 
            implementations differ widely in which DHCPv6 options that 
            they support, the following approach has been taken to 
            defining options: Only the DHCPv6 options defined in 
            <xref target="RFC8415"/> are included in this document. 
          </t>
          <t>Of these, only the options that require operator 
            configuration are modelled. E.g. OPTION_IA_NA (3) is created
            by the DHCP server when requested by the client. The
            contents of the fields in the option are based on a number
            of input configuration parameters which the server will 
            apply when it receives the request (e.g., the T1/T2 timers
            that are relevant for the pool of addresses). As a result, 
            there are no fields that are directly configurable in the 
            option, so it is not modelled.
          </t>
          <t>Further options definitions can be added by additional YANG 
            modules via augmentation into the relevant element modules 
            from this document.
            <xref target="example-dhcp-options-extension"/> contains an
            example module showing how the DHCPv6 option definitions can 
            be extended in this manner. Some guidance on how to write 
            YANG modules for additional DHCPv6 options is also provided.
          </t>
        </section>
      </section>
      <section anchor="terminology">
        <name>Terminology</name>
        <t>The reader should be familiar with the YANG data modelling 
          language defined in <xref target="RFC7950"/>.
        </t>
        <t>The YANG modules in this document adopt the Network 
          Management Datastore Architecture (NMDA) 
          <xref target="RFC8342"/>.  The meanings of the symbols used 
          in tree diagrams are defined in <xref target="RFC8340"/>.
        </t>
        <t>The reader should be familiar with DHCPv6 relevant 
          terminology as defined in <xref target="RFC8415"/> and other 
          relevant documents.</t>
      </section>
    </section>
    <section anchor="tree-diagrams">
      <name>DHCPv6 Tree Diagrams</name>
      <section anchor="dhcpv6-server-tree">
        <name>DHCPv6 Server Tree Diagram</name>
        <t>The tree diagram in <xref target="server-structure"/> 
          provides an overview of the DHCPv6 server module. The tree 
          also includes the augmentations of the relevant option 
          definitions from <xref target="server-options-module"/> and 
          the common functions module <xref target="common-module"/>.
        </t>
        <figure anchor="server-structure">
          <name>DHCPv6 Server Data Module Structure</name>
          <artwork align="center" xml:base="/home/if/Documents/yang/ietf-dhcpv6-server.yang.tree.clean.xml">
<![CDATA[
module: ietf-dhcpv6-server
  +--rw dhcpv6-node-type?   identityref
  +--rw dhcpv6-server
     +--rw server-duid
     |  +--rw type-code?                           uint16
     |  +--rw (duid-type)?
     |  |  +--:(duid-llt)
     |  |  |  +--rw duid-llt-hardware-type?        uint16
     |  |  |  +--rw duid-llt-time?                 yang:timeticks
     |  |  |  +--rw duid-llt-link-layer-address?
     |  |  |          yang:mac-address
     |  |  +--:(duid-en)
     |  |  |  +--rw duid-en-enterprise-number?     uint32
     |  |  |  +--rw duid-en-identifier?            string
     |  |  +--:(duid-ll)
     |  |  |  +--rw duid-ll-hardware-type?         uint16
     |  |  |  +--rw duid-ll-link-layer-address?
     |  |  |          yang:mac-address
     |  |  +--:(duid-uuid)
     |  |  |  +--rw uuid?                          yang:uuid
     |  |  +--:(duid-unstructured)
     |  |     +--rw data?                          binary
     |  +--ro active-duid?                         binary
     +--rw vendor-config
     +--rw option-sets
     |  +--rw option-set* [option-set-id]
     |     +--rw option-set-id
     |     |       uint32
     |     +--rw description?
     |     |       string
     |     +--rw rfc8415-srv:preference-option
     |     |  +--rw rfc8415-srv:pref-value?   uint8
     |     +--rw rfc8415-srv:auth-option
     |     |  +--rw rfc8415-srv:protocol?           uint8
     |     |  +--rw rfc8415-srv:algorithm?          uint8
     |     |  +--rw rfc8415-srv:rdm?                uint8
     |     |  +--rw rfc8415-srv:replay-detection?   uint64
     |     |  +--rw rfc8415-srv:auth-information?   string
     |     +--rw rfc8415-srv:server-unicast-option
     |     |  +--rw rfc8415-srv:server-address?
     |     |          inet:ipv6-address
     |     +--rw rfc8415-srv:status-code-option
     |     |  +--rw rfc8415-srv:status-code?      uint16
     |     |  +--rw rfc8415-srv:status-message?   string
     |     +--rw rfc8415-srv:rapid-commit-option!
     |     +--rw rfc8415-srv:vendor-specific-information-option
     |     |  +--rw rfc8415-srv:vendor-specific-information-option-
instances*
     |     |          [enterprise-number]
     |     |     +--rw rfc8415-srv:enterprise-number     uint32
     |     |     +--rw rfc8415-srv:vendor-option-data*
     |     |             [sub-option-code]
     |     |        +--rw rfc8415-srv:sub-option-code    uint16
     |     |        +--rw rfc8415-srv:sub-option-data?   string
     |     +--rw rfc8415-srv:reconfigure-message-option
     |     |  +--rw rfc8415-srv:msg-type?   uint8
     |     +--rw rfc8415-srv:reconfigure-accept-option!
     |     +--rw rfc8415-srv:info-refresh-time-option
     |     |  +--rw rfc8415-srv:info-refresh-time?
     |     |          dhcpv6-common:timer-seconds32
     |     +--rw rfc8415-srv:sol-max-rt-option
     |     |  +--rw rfc8415-srv:sol-max-rt-value?
     |     |          dhcpv6-common:timer-seconds32
     |     +--rw rfc8415-srv:inf-max-rt-option
     |        +--rw rfc8415-srv:inf-max-rt-value?
     |                dhcpv6-common:timer-seconds32
     +--rw class-selector
     +--rw network-ranges
        +--rw option-set-id*               leafref
        +--rw valid-lifetime?
        |       dhcpv6-common:timer-seconds32
        +--rw renew-time?
        |       dhcpv6-common:timer-seconds32
        +--rw rebind-time?
        |       dhcpv6-common:timer-seconds32
        +--rw preferred-lifetime?
        |       dhcpv6-common:timer-seconds32
        +--rw rapid-commit?                boolean
        +--rw network-range* [network-range-id]
        |  +--rw id                    uint32
        |  +--rw description           string
        |  +--rw network-prefix        inet:ipv6-prefix
        |  +--rw option-set-id*        leafref
        |  +--rw valid-lifetime?
        |  |       dhcpv6-common:timer-seconds32
        |  +--rw renew-time?
        |  |       dhcpv6-common:timer-seconds32
        |  +--rw rebind-time?
        |  |       dhcpv6-common:timer-seconds32
        |  +--rw preferred-lifetime?
        |  |       dhcpv6-common:timer-seconds32
        |  +--rw rapid-commit?         boolean
        |  +--rw address-pools
        |  |  +--rw address-pool* [pool-id]
        |  |     +--rw pool-id               uint32
        |  |     +--rw pool-prefix           inet:ipv6-prefix
        |  |     +--rw start-address
        |  |     |       inet:ipv6-address-no-zone
        |  |     +--rw end-address
        |  |     |       inet:ipv6-address-no-zone
        |  |     +--rw max-address-count
        |  |     |       dhcpv6-common:threshold
        |  |     +--rw option-set-id*        leafref
        |  |     +--rw valid-lifetime?
        |  |     |       dhcpv6-common:timer-seconds32
        |  |     +--rw renew-time?
        |  |     |       dhcpv6-common:timer-seconds32
        |  |     +--rw rebind-time?
        |  |     |       dhcpv6-common:timer-seconds32
        |  |     +--rw preferred-lifetime?
        |  |     |       dhcpv6-common:timer-seconds32
        |  |     +--rw rapid-commit?         boolean
        |  |     +--rw host-reservations
        |  |     |  +--rw host-reservation* [reserved-addr]
        |  |     |     +--rw client-duid?          binary
        |  |     |     +--rw reserved-addr
        |  |     |     |       inet:ipv6-address
        |  |     |     +--rw option-set-id*        leafref
        |  |     |     +--rw valid-lifetime?
        |  |     |     |       dhcpv6-common:timer-seconds32
        |  |     |     +--rw renew-time?
        |  |     |     |       dhcpv6-common:timer-seconds32
        |  |     |     +--rw rebind-time?
        |  |     |     |       dhcpv6-common:timer-seconds32
        |  |     |     +--rw preferred-lifetime?
        |  |     |     |       dhcpv6-common:timer-seconds32
        |  |     |     +--rw rapid-commit?         boolean
        |  |     +--ro active-leases
        |  |        +--ro total-count        uint64
        |  |        +--ro allocated-count    uint64
        |  |        +--ro active-lease* [leased-address]
        |  |           +--ro leased-address
        |  |           |       inet:ipv6-address
        |  |           +--ro client-duid?          binary
        |  |           +--ro iaid                  uint32
        |  |           +--ro allocation-time?
        |  |           |       yang:date-and-time
        |  |           +--ro last-renew-rebind?
        |  |           |       yang:date-and-time
        |  |           +--ro preferred-lifetime?
        |  |           |       dhcpv6-common:timer-seconds32
        |  |           +--ro valid-lifetime?
        |  |           |       dhcpv6-common:timer-seconds32
        |  |           +--ro lease-t1?
        |  |           |       dhcpv6-common:timer-seconds32
        |  |           +--ro lease-t2?
        |  |                   dhcpv6-common:timer-seconds32
        |  +--rw prefix-pools {prefix-delegation}?
        |     +--rw prefix-pool* [pool-id]
        |        +--rw pool-id                     uint32
        |        +--rw pool-prefix
        |        |       inet:ipv6-prefix
        |        +--rw client-prefix-length        uint8
        |        +--rw max-pd-space-utilization
        |        |       dhcpv6-common:threshold
        |        +--rw option-set-id*              leafref
        |        +--rw valid-lifetime?
        |        |       dhcpv6-common:timer-seconds32
        |        +--rw renew-time?
        |        |       dhcpv6-common:timer-seconds32
        |        +--rw rebind-time?
        |        |       dhcpv6-common:timer-seconds32
        |        +--rw preferred-lifetime?
        |        |       dhcpv6-common:timer-seconds32
        |        +--rw rapid-commit?               boolean
        |        +--rw host-reservations
        |        |  +--rw prefix-reservation* [reserved-prefix]
        |        |  |  +--rw client-duid?           binary
        |        |  |  +--rw reserved-prefix
        |        |  |  |       inet:ipv6-prefix
        |        |  |  +--rw reserved-prefix-len?   uint8
        |        |  +--rw option-set-id*        leafref
        |        |  +--rw valid-lifetime?
        |        |  |       dhcpv6-common:timer-seconds32
        |        |  +--rw renew-time?
        |        |  |       dhcpv6-common:timer-seconds32
        |        |  +--rw rebind-time?
        |        |  |       dhcpv6-common:timer-seconds32
        |        |  +--rw preferred-lifetime?
        |        |  |       dhcpv6-common:timer-seconds32
        |        |  +--rw rapid-commit?         boolean
        |        +--ro active-leases
        |           +--ro total-count        uint64
        |           +--ro allocated-count    uint64
        |           +--ro active-lease* [leased-prefix]
        |              +--ro leased-prefix
        |              |       inet:ipv6-prefix
        |              +--ro client-duid?          binary
        |              +--ro iaid                  uint32
        |              +--ro allocation-time?
        |              |       yang:date-and-time
        |              +--ro last-renew-rebind?
        |              |       yang:date-and-time
        |              +--ro preferred-lifetime?
        |              |       dhcpv6-common:timer-seconds32
        |              +--ro valid-lifetime?
        |              |       dhcpv6-common:timer-seconds32
        |              +--ro lease-t1?
        |              |       dhcpv6-common:timer-seconds32
        |              +--ro lease-t2?
        |                      dhcpv6-common:timer-seconds32
        +--ro solicit-count?               uint32
        +--ro advertise-count?             uint32
        +--ro request-count?               uint32
        +--ro confirm-count?               uint32
        +--ro renew-count?                 uint32
        +--ro rebind-count?                uint32
        +--ro reply-count?                 uint32
        +--ro release-count?               uint32
        +--ro decline-count?               uint32
        +--ro reconfigure-count?           uint32
        +--ro information-request-count?   uint32

  rpcs:
    +---x delete-address-lease
    |  +---w input
    |  |  +---w lease-address-to-delete    inet:ipv6-address
    |  +--ro output
    |     +--ro return-message?   string
    +---x delete-prefix-lease
       +---w input
       |  +---w lease-prefix-to-delete    inet:ipv6-prefix
       +--ro output
          +--ro return-message?   string

  notifications:
    +---n address-pool-utilization-threshold-exceeded
    |  +--ro pool-id?                   leafref
    |  +--ro total-address-count        uint64
    |  +--ro max-address-count          uint64
    |  +--ro allocated-address-count    uint64
    +---n prefix-pool-utilization-threshold-exceeded
    |       {prefix-delegation}?
    |  +--ro pool-id                     leafref
    |  +--ro max-pd-space-utilization    leafref
    |  +--ro pd-space-utilization?       uint64
    +---n invalid-client-detected
    |  +--ro duid?          binary
    |  +--ro description?   string
    +---n decline-received
    |  +--ro duid?                 binary
    |  +--ro declined-resources* []
    |     +--ro (resource-type)?
    |        +--:(declined-address)
    |        |  +--ro address?   inet:ipv6-address
    |        +--:(declined-prefix)
    |           +--ro prefix?    inet:ipv6-prefix
    +---n non-success-code-sent
       +--ro status-code    uint16
       +--ro duid?          binary
]]>
</artwork>
        </figure>
        <t>Descriptions of important nodes:</t>
        <ul spacing="normal">
          <li>dhcpv6-node-type: The different functional DHCPv6 elements 
            each have their relevant identities.</li>
          <li>dhcpv6-server: This container holds the server's DHCPv6
            specific configuration.</li>
          <li>server-duid: Each server must have a DUID (DHCP Unique
            Identifier) to identify itself to clients. A DUID consists 
            of a two-octet type field and an arbitrary length (of no 
            more than 128-bytes) content field. Currently there are
            four defined types of DUIDs in <xref target="RFC8415"/> and
            <xref target="RFC6355"/>: DUID-LLT, DUID-EN, DUID-LL, and
            DUID-UUID. DUID-Unknown is used for arbitrary DUID formats
            which do not follow any of these defined types. 
            'active-duid' is a read-only field that the server's current 
            DUID can be retrieved from. The DUID definitions are 
            imported from the 'ietf-dhcpv6-common.yang' module.
          </li>
          <li>vendor-config: This container is provided as a location 
            for additional implementation specific YANG nodes for the 
            configuration of the device to be augmented. See
            <xref target="vendor-specific-configuration-example"/> for 
            an example of such a module.
          </li>
          <li>option-sets: The server can be configured with
            multiple option-sets. These are groups of DHCPv6 options 
            with common parameters which will be supplied to clients on 
            request.  The 'option-set-id' field is used to reference an 
            option-set elsewhere in the server's configuration.
          </li>
          <li>option-set: Holds configuration parameters for DHCPv6 
            options.  The initial set of definitions are contained in 
            the module 'ietf-dhcpv6-options-rfc8415-server.yang' and are 
            augmented into the server module at this point. Other DHCPv6 
            option modules can be augmented here as required.
          </li>
          <li>class-selector: This is provided as a location for
            additional implementation specific YANG nodes for vendor 
            specific class selector nodes to be augmented. See
            <xref target="class-selector-example"/> for an example of 
            this.
          </li>
          <li>network-ranges: This module uses a hierarchical model
            for the allocation of addresses and prefixes. At the top 
            level 'network-ranges' holds global configuration 
            parameters. Under this, a list of 'network-ranges' can be 
            defined. Inside 'network-rages', 'address-pools' (for IA_NA 
            and IA_TA allocations), and 'prefix-pools' (for IA_PD 
            allocation) are defined. Finally within the pools, specific 
            host-reservations are held.
          </li>
          <li>prefix-pools: Defines pools to be used for prefix
            delegation to clients. As prefix delegation is not supported 
            by all DHCPv6 server implementations, it is enabled by a 
            feature statement.</li>
        </ul>
        <t>Information about notifications:</t>
        <ul spacing="normal">
          <li>address/prefix-pool-utilization-threshold-exceeded: Raised 
            when number of leased addresses or prefixes exceeds the 
            configured usage threshold. 
          </li>
          <li>invalid-client-detected: Raised when the server detects an
            invalid client. A description of the error that has 
            generated the notification can be included.
          </li>
          <li>decline-received: Raised when a DHCPv6 Decline message is 
            received from a client.
          </li>
          <li>non-success-code-sent: Raised when a status message is 
            raised for an error.
          </li>
        </ul>
        <t>Information about RPCs</t>
        <ul spacing="normal">
          <li>delete-address-lease: Allows the deletion of a lease for
            an individual IPv6 address from the server's lease database.
          </li>
          <li>delete-prefix-lease: Allows the deletion of a lease for
            an individual IPv6 prefix from the server's lease database.
          </li>
        </ul>
      </section>
      <section anchor="dhcpv6-relay-tree">
        <name>DHCPv6 Relay Tree Diagram</name>
        <t>The tree diagram in <xref target="relay-structure"/> provides 
          an overview of the DHCPv6 relay module. The tree also includes
          the augmentations of the relevant option definitions from
          <xref target="relay-options-module"/> and the common functions 
          module <xref target="common-module"/>.
        </t>
        <figure anchor="relay-structure">
          <name>DHCPv6 Relay Data Module Structure</name>
          <artwork align="center" xml:base="/home/if/Documents/yang/ietf-dhcpv6-relay.yang.tree.clean.xml">
<![CDATA[
module: ietf-dhcpv6-relay
  +--rw dhcpv6-node-type?   identityref
  +--rw dhcpv6-relay
     +--rw relay-if* [if-name]
     |  +--rw if-name
     |  |       if:interface-ref
     |  +--rw destination-addresses*
     |  |       inet:ipv6-address
     |  +--rw link-address?                         binary
     |  +--rw relay-options
     |  +--ro solicit-received-count?               uint32
     |  +--ro advertise-sent-count?                 uint32
     |  +--ro request-received-count?               uint32
     |  +--ro confirm-received-count?               uint32
     |  +--ro renew-received-count?                 uint32
     |  +--ro rebind-received-count?                uint32
     |  +--ro reply-sent-count?                     uint32
     |  +--ro release-received-count?               uint32
     |  +--ro decline-received-count?               uint32
     |  +--ro reconfigure-sent-count?               uint32
     |  +--ro information-request-received-count?   uint32
     |  +--ro unknown-message-received-count?       uint32
     |  +--ro unknown-message-sent-count?           uint32
     |  +--ro discarded-message-count?              uint32
     |  +--rw prefix-delegation! {prefix-delegation}?
     |     +--ro pd-leases* [ia-pd-prefix]
     |        +--ro ia-pd-prefix           inet:ipv6-prefix
     |        +--ro last-renew?            yang:date-and-time
     |        +--ro client-peer-address?   inet:ipv6-address
     |        +--ro client-duid?           binary
     |        +--ro server-duid?           binary
     +--ro relay-forward-sent-count?               uint32
     +--ro relay-forward-received-count?           uint32
     +--ro relay-reply-received-count?             uint32
     +--ro relay-forward-unknown-sent-count?       uint32
     +--ro relay-forward-unknown-received-count?   uint32
     +--ro discarded-message-count?                uint32

  rpcs:
    +---x clear-prefix-entry
    |  +---w input
    |  |  +---w lease-prefix    inet:ipv6-prefix
    |  +--ro output
    |     +--ro return-message?   string
    +---x clear-client-prefixes
    |  +---w input
    |  |  +---w client-duid    binary
    |  +--ro output
    |     +--ro return-message?   string
    +---x clear-interface-prefixes
       +---w input
       |  +---w interface    if:interface-ref
       +--ro output
          +--ro return-message?   string

  notifications:
    +---n relay-event
       +--ro topology-change
          +--ro relay-if-name?
          |       -> /dhcpv6-relay/relay-if/if-name
          +--ro last-ipv6-addr?   inet:ipv6-address

]]>
</artwork>
        </figure>
        <t>Descriptions of important nodes:</t>
        <ul spacing="normal">
          <li>dhcpv6-node-type: The different functional DHCPv6 elements 
            each have their relevant identities.</li>
          <li>dhcpv6-relay: This container holds the relay's DHCPv6
            specific configuration.</li>
          <li>relay-if: As a relay may have multiple client-facing
            interfaces, they are configured in a list. The if-name leaf
            is the key and is an interface-ref to the applicable 
            interface defined by the 'ietf-interfaces' YANG module.
          </li>
          <li>destination-addresses: Defines a list of IPv6 addresses 
            that client messages will be relayed to. May include unicast 
            or multicast addresses.</li>
          <li>link-address: Configures the value that the relay will put 
            into the link-address field of Relay-Forward messages.
          </li>
          <li>prefix-delegation: As prefix delegation is not
            supported by all DHCPv6 relay implementations, it is enabled
            by this feature statement where required.</li>
          <li>pd-leases: Contains read-only nodes for holding 
            information about active delegated prefix leases.
          </li>
          <li>relay-options: As with the Server module, DHCPv6 options
            that can be sent by the relay are augmented here.
          </li>
        </ul>
        <t>Information about notifications:</t>
        <ul spacing="normal">
          <li>topology-changed: Raised when the topology of the relay 
            agent is changed, e.g. a client facing interface is 
            reconfigured.
          </li>
        </ul>
        <t>Information about RPCs</t>
        <ul spacing="normal">
          <li>clear-prefix-lease: Allows the removal of a delegated 
            lease entry from the relay. 
          </li>
          <li>clear-client-prefixes: Allows the removal of all of the
            delegated lease entries for a single client (referenced by
            client DUID) from the relay. 
          </li>
          <li>clear-interface-prefixes: Allows the removal of all of
            the delegated lease entries from an interface on the relay.
          </li>
        </ul>
      </section>
      <section anchor="dhcpv6-client-tree">
        <name>DHCPv6 Client Tree Diagram</name>
        <t>The tree diagram in <xref target="client-structure"/> 
          provides an overview of the DHCPv6 client module. The tree 
          also includes the augmentations of the relevant option 
          definitions from <xref target="client-options-module"/> and 
          the common functions module <xref target="common-module"/>.
        </t>
        <figure anchor="client-structure">
          <name>DHCPv6 Client Data Module Structure</name>
          <artwork align="center" xml:base="/home/if/Documents/yang/ietf-dhcpv6-client.yang.tree.clean.xml">
<![CDATA[
module: ietf-dhcpv6-client
  +--rw dhcpv6-node-type?   identityref
  +--rw dhcpv6-client
     +--rw client-if* [if-name]
        +--rw if-name
        |       if:interface-ref
        +--rw type-code?                           uint16
        +--rw (duid-type)?
        |  +--:(duid-llt)
        |  |  +--rw duid-llt-hardware-type?        uint16
        |  |  +--rw duid-llt-time?                 yang:timeticks
        |  |  +--rw duid-llt-link-layer-address?
        |  |          yang:mac-address
        |  +--:(duid-en)
        |  |  +--rw duid-en-enterprise-number?     uint32
        |  |  +--rw duid-en-identifier?            string
        |  +--:(duid-ll)
        |  |  +--rw duid-ll-hardware-type?         uint16
        |  |  +--rw duid-ll-link-layer-address?
        |  |          yang:mac-address
        |  +--:(duid-uuid)
        |  |  +--rw uuid?                          yang:uuid
        |  +--:(duid-unstructured)
        |     +--rw data?                          binary
        +--ro active-duid?                         binary
        +--rw client-configured-options
        +--rw ia-na* [iaid]
        |  +--rw iaid             uint32
        |  +--rw ia-na-options
        |  +--ro lease-state
        |     +--ro ia-na-address?        inet:ipv6-address
        |     +--ro preferred-lifetime?
        |     |       dhcpv6-common:timer-seconds32
        |     +--ro valid-lifetime?
        |     |       dhcpv6-common:timer-seconds32
        |     +--ro lease-t1?
        |     |       dhcpv6-common:timer-seconds32
        |     +--ro lease-t2?
        |     |       dhcpv6-common:timer-seconds32
        |     +--ro allocation-time?      yang:date-and-time
        |     +--ro last-renew-rebind?    yang:date-and-time
        |     +--ro server-duid?          binary
        +--rw ia-ta* [iaid]
        |  +--rw iaid             uint32
        |  +--rw ia-ta-options
        |  +--ro lease-state
        |     +--ro ia-ta-address?        inet:ipv6-address
        |     +--ro preferred-lifetime?
        |     |       dhcpv6-common:timer-seconds32
        |     +--ro valid-lifetime?
        |     |       dhcpv6-common:timer-seconds32
        |     +--ro allocation-time?      yang:date-and-time
        |     +--ro last-renew-rebind?    yang:date-and-time
        |     +--ro server-duid?          binary
        +--rw ia-pd* [iaid]
        |  +--rw iaid             uint32
        |  +--rw ia-pd-options
        |  +--ro lease-state
        |     +--ro ia-pd-prefix?         inet:ipv6-prefix
        |     +--ro preferred-lifetime?
        |     |       dhcpv6-common:timer-seconds32
        |     +--ro valid-lifetime?
        |     |       dhcpv6-common:timer-seconds32
        |     +--ro lease-t1?
        |     |       dhcpv6-common:timer-seconds32
        |     +--ro lease-t2?
        |     |       dhcpv6-common:timer-seconds32
        |     +--ro allocation-time?      yang:date-and-time
        |     +--ro last-renew-rebind?    yang:date-and-time
        |     +--ro server-duid?          binary
        +--ro solicit-count?                       uint32
        +--ro advertise-count?                     uint32
        +--ro request-count?                       uint32
        +--ro confirm-count?                       uint32
        +--ro renew-count?                         uint32
        +--ro rebind-count?                        uint32
        +--ro reply-count?                         uint32
        +--ro release-count?                       uint32
        +--ro decline-count?                       uint32
        +--ro reconfigure-count?                   uint32
        +--ro information-request-count?           uint32

  notifications:
    +---n invalid-ia-detected
    |  +--ro iaid           uint32
    |  +--ro description?   string
    +---n retransmission-failed
    |  +--ro failure-type    enumeration
    +---n unsuccessful-status-code
    |  +--ro status-code    uint16
    |  +--ro server-duid    binary
    +---n server-duid-changed
       +--ro new-server-duid         binary
       +--ro previous-server-duid    binary
       +--ro lease-ia-na?
       |       -> /dhcpv6-client/client-if/ia-na/iaid
       +--ro lease-ia-ta?
       |       -> /dhcpv6-client/client-if/ia-ta/iaid
       +--ro lease-ia-pd?
               -> /dhcpv6-client/client-if/ia-pd/iaid

]]>
</artwork>
        </figure>
        <t>Descriptions of important nodes:</t>
        <ul spacing="normal">
          <li>dhcpv6-node-type: The different functional DHCPv6 elements 
            each have their relevant identities.
          </li>
          <li>dhcpv6-client: This container holds the client's DHCPv6
            specific configuration.</li>
          <li>client-if: As a client may have multiple interfaces 
            requesting configuration over DHCP, they are configured in a 
            list. The if-name leaf is the key and is an interface-ref to 
            the applicable interface defined by the 'ietf-interfaces' 
            YANG module.
          </li>
          <li>client-duid: Each DHCP client must have a DUID (DHCP 
            Unique Identifier) to identify itself to clients. A DUID 
            consists of a two-octet type field and an arbitrary length 
            (of no more than 128-bytes) content field. Currently there 
            are four defined types of DUIDs in <xref target="RFC8415"/>:
            DUID-LLT, DUID-EN, DUID-LL, and DUID-UUID. DUID-Unknown is 
            used for arbitrary DUID formats which do not follow any of 
            these defined types. 'active-duid' is a read-only field that 
            the client's current DUID can be retrieved from. The DUID 
            definitions are imported from the 'ietf-dhcpv6-common.yang' 
            module. DUID is configured under the 'client-if' to allow a 
            client to have different DUIDs for each interface if 
            required.
          </li>
          <li>ia-na, ia-ta, ia-pd: Contains configuration nodes relevant
            for requesting one or more of each of the lease types. Also
            contains read only nodes related to active leases.
          </li>
        </ul>
        <t>Information about notifications:</t>
        <ul spacing="normal">
          <li>invalid-ia-detected: Raised when the identity association 
            of the client can be proved to be invalid. Possible 
            conditions include: duplicated address, illegal address, 
            etc.
          </li>
          <li>retransmission-failed: Raised when the retransmission 
            mechanism defined in <xref target="RFC8415"/> has failed.
          </li>
        </ul>
      </section>
    </section>
    <section anchor="yang-module">
      <name>DHCPv6 YANG Modules</name>
      <section anchor="server-module">
        <name>DHCPv6 Server YANG Module</name>
        <t>This module imports typedefs from <xref target="RFC6991"/>,
          <xref target="RFC8343"/>.</t>
        <artwork align="center" xml:base="/home/if/Documents/yang/ietf-dhcpv6-server.yang.xml">
<![CDATA[<CODE BEGINS> file "ietf-dhcpv6-server.yang" 

module ietf-dhcpv6-server {
  yang-version 1.1;
  namespace "urn:ietf:params:xml:ns:yang:ietf-dhcpv6-server";
  prefix "dhcpv6-server";

  import ietf-inet-types {
    prefix inet;
    reference
      "RFC 6991: Common YANG Data Types";
  }

  import ietf-yang-types {
    prefix yang;
    reference
      "RFC 6991: Common YANG Data Types";
  }

  import ietf-dhcpv6-common {
    prefix dhcpv6-common;
    reference
      "To be updated on publication";
  }

  import ietf-netconf-acm {
    prefix nacm;
    reference
      "RFC 8341: Network Configuration Access Control Model";
  }

  organization "DHC WG";
  contact
    "cuiyong@tsinghua.edu.cn
    lh.sunlinh@gmail.com
    ian.farrer@telekom.de
    sladjana.zechlin@telekom.de
    hezihao9512@gmail.com
    godfryd@isc.org";

  description "This YANG module defines components for the 
    configuration and management of DHCPv6 servers.

    Copyright (c) 2018 IETF Trust and the persons identified as
    authors of the code.  All rights reserved.

    Redistribution and use in source and binary forms, with or
    without modification, is permitted pursuant to, and subject
    to the license terms contained in, the Simplified BSD License
    set forth in Section 4.c of the IETF Trust's Legal Provisions
    Relating to IETF Documents
    (http://trustee.ietf.org/license-info).

    This version of this YANG module is part of RFC 8513; see
    the RFC itself for full legal notices.";
    
  revision 2020-12-01 {
    description "Version update for draft -12 publication.";
    reference "I-D: draft-ietf-dhc-dhcpv6-yang-12";
  }

  revision 2020-05-26 {
    description "Version update for draft -11 publication and
      to align revisions across the different modules.";
    reference "I-D: draft-ietf-dhc-dhcpv6-yang-11";
  }

  revision 2019-12-02 {
    description "Major reworking of the module.";
    reference "I-D: draft-ietf-dhc-dhcpv6-yang-10";
  }

  revision 2018-09-04 {
    description "";
    reference "I-D: draft-ietf-dhc-dhcpv6-yang";
  }

  revision 2018-03-04 {
    description "Resolved most issues on the DHC official
      github";
    reference "I-D: draft-ietf-dhc-dhcpv6-yang";
  }

  revision 2017-12-22 {
    description "Resolve most issues on Ian's github.";
    reference "I-D: draft-ietf-dhc-dhcpv6-yang";
  }

  revision 2017-11-24 {
    description "First version of the separated server specific
      YANG model.";
    reference "I-D: draft-ietf-dhc-dhcpv6-yang";
  }

  /*
   * Identities
   */

  identity server {
    description "DHCPv6 server identity.";
    base "dhcpv6-common:dhcpv6-node";
  }

  leaf dhcpv6-node-type {
    description "Type for a DHCPv6 server.";
    type identityref {
      base "dhcpv6-common:dhcpv6-node";
    }
  }

  /*
   * Features
   */

  feature prefix-delegation {
    description "Denotes that the server implements DHCPv6 prefix 
      delegation.";
  }

  /*
   * Groupings
   */

  grouping resource-config {
    description "Nodes that are reused at multiple levels in the 
      DHCPv6 server's addressing hierarchy.";
    leaf-list option-set-id {
      type leafref {
        path "/dhcpv6-server/option-sets/option-set/option-set-id";
      }
      description "The ID field of relevant set of DHCPv6 options 
        (option-set) to be provisioned to clients of this 
        network-range.";
    }
    leaf valid-lifetime {
      type dhcpv6-common:timer-seconds32;
      description "Valid lifetime for the Identity Association 
        (IA).";
    }
    leaf renew-time {
      type dhcpv6-common:timer-seconds32;
      description "Renew (T1) time.";
    }
    leaf rebind-time {
      type dhcpv6-common:timer-seconds32;
      description "Rebind (T2) time.";
    }
    leaf preferred-lifetime {
      type dhcpv6-common:timer-seconds32;
      description "Preferred lifetime for the Identity Association 
        (IA).";
    }
    leaf rapid-commit {
      type boolean;
      description "A value of 1 specifies that the pool supports
        client-server exchanges involving two messages.";
    }
  }

  grouping lease-information {
    description "Binding information for each client that has 
      been allocated an IPv6 address or prefix.";
    leaf client-duid {
      description "Client DUID.";
      type binary;
    }
    leaf iaid {
      type uint32;
      mandatory true;
      description "Client's IAID";
    }
    leaf allocation-time {
      description "Time and date that the lease was made.";
      type yang:date-and-time;
    }
    leaf last-renew-rebind {
      description "Time of the last successful renew or 
        rebind.";
      type yang:date-and-time;
    }
    leaf preferred-lifetime {
      description "The preferred lifetime expressed in 
        seconds.";
      type dhcpv6-common:timer-seconds32;
    }
    leaf valid-lifetime {
      description "The valid lifetime for the leased prefix
        expressed in seconds.";
      type dhcpv6-common:timer-seconds32;
    }
    leaf lease-t1 {
      description "The time interval after which the client
        should contact the server from which the addresses
        in the IA_NA were obtained to extend the lifetimes
        of the addresses assigned to the IA_PD.";
      type dhcpv6-common:timer-seconds32;
    }
    leaf lease-t2 {
      description "The time interval after which the client
        should contact any available server to extend
        the lifetimes of the addresses assigned to the 
        IA_PD.";
      type dhcpv6-common:timer-seconds32;
    }
  }

  grouping message-stats {
    description "Counters for DHCPv6 messages.";
    leaf solicit-count {
      config "false";
      type uint32;
      description "Number of Solicit (1) messages received.";
    }
    leaf advertise-count {
      config "false";
      type uint32;
      description "Number of Advertise (2) messages sent.";
    }
    leaf request-count {
      config "false";
      type uint32;
      description "Number of Request (3) messages received.";
    }
    leaf confirm-count {
      config "false";
      type uint32;
      description "Number of Confirm (4) messages received.";
    }
    leaf renew-count {
      config "false";
      type uint32;
      description "Number of Renew (5) messages received.";
    }
    leaf rebind-count {
      config "false";
      type uint32;
      description "Number of Rebind (6) messages received.";
    }
    leaf reply-count {
      config "false";
      type uint32;
      description "Number of Reply (7) messages sent.";
    }
    leaf release-count {
      config "false";
      type uint32;
      description "Number of Release (8) messages received.";
    }
    leaf decline-count {
      config "false";
      type uint32;
      description "Number of Decline (9) messages received.";
    }
    leaf reconfigure-count {
      config "false";
      type uint32;
      description "Number of Reconfigure (10) messages sent.";
    }
    leaf information-request-count {
      config "false";
      type uint32;
      description "Number of Information-request (11) messages
        received.";
    }
  }

  /*
   * Data Nodes
   */

  container dhcpv6-server {
    container server-duid {
      description "DUID of the server.";
      uses dhcpv6-common:duid;
    }
    container vendor-config {
      description "This container provides a location for 
        augmenting vendor or implementation specific 
        configuration nodes.";
    }
    container option-sets {
      description "A server may allow different option sets
        to be configured for clients matching specific parameters
        such as topological location or client type. The 
        'option-set' list is a set of options and their 
        contents that will be returned to clients.";
      list option-set {
        key option-set-id;
        description "YANG definitions for DHCPv6 options are
          contained in separate YANG modules and augmented to this
          container as required.";
        leaf option-set-id {
          type uint32;
          description "Option set identifier.";
        }
        leaf description {
          type string;
          description "An optional field for storing additional
            information relevant to the option set.";
        }
      }
    }

    container class-selector {
      description "DHCPv6 servers use a 'class-selector' function
        in order to identify and classify incoming client messages
        so that they can be given the correct configuration.
        The mechanisms used for implementing this function vary
        greatly between different implementations such that they 
        are not possible to include in this module. This container
        provides a location for server implementors to augment
        their own class-selector YANG.";
    }

    container network-ranges {
      description "This model is based on an address and parameter 
        allocation hierarchy.  The top level is 'global' - which 
        is defined as the container for all network-ranges. Under 
        this are the individual network-ranges.";
      uses resource-config;
      list network-range {
        key network-range-id;
        description "Network-ranges are identified by the
          'network-range-id' key.";
        leaf id {
          type uint32;
          mandatory true;
          description "Equivalent to subnet ID.";
        }
        leaf description {
          type string;
          mandatory true;
          description "Description for the network range.";
        }
        leaf network-prefix {
          type inet:ipv6-prefix;
          mandatory true;
          description "Network prefix.";
        }
        uses resource-config;
        container address-pools {
          description "Configuration for the DHCPv6 server's 
            address pools.";
          list address-pool {
            key pool-id;
            description "List of address pools for allocation to 
              clients, distinguished by 'pool-id'.";
            leaf pool-id {
              type uint32;
              mandatory true;
              description "Unique identifier for the pool.";
            }
            leaf pool-prefix {
              type inet:ipv6-prefix;
              mandatory true;
              description "IPv6 prefix for the pool.";
            }
            leaf start-address {
              type inet:ipv6-address-no-zone;
              mandatory true;
              description "Start IPv6 address for the pool.";
            }
            leaf end-address {
              type inet:ipv6-address-no-zone;
              mandatory true;
              description "End IPv6 address for the pool.";
            }
            leaf max-address-count {
              type dhcpv6-common:threshold;
              mandatory true;
              description "Maximum number of addresses that can
                be simultaneously allocated from this pool.";
            }
            uses resource-config;
            container host-reservations {
              description "Configuration for host reservations from
                the address pool.";
              list host-reservation {
                key reserved-addr;
                leaf client-duid {
                  type binary;
                  description "Client DUID for the reservation.";
                }
                leaf reserved-addr {
                  type inet:ipv6-address;
                  description "Reserved IPv6 address.";
                }
                uses resource-config;
              }
            }
            container active-leases {
              description "Holds state related to active client 
                leases.";
              config false;
              leaf total-count {
                type uint64;
                mandatory true;
                description "The total number of addresses in the
                  pool.";
              }
              leaf allocated-count {
                type uint64;
                mandatory true;
                description "The number of addresses or prefixes 
                  in the pool that are currently allocated.";
              }
              list active-lease {
                key leased-address;
                leaf leased-address {
                  type inet:ipv6-address;
                }
                uses lease-information;
              }
            }
          }
        }
        container prefix-pools {
          description "Configuration for the DHCPv6 server's 
            prefix pools.";
          if-feature prefix-delegation;
          list prefix-pool {
            key pool-id;
            description "List of prefix pools for allocation to 
              clients, distinguished by 'pool-id'.";
            leaf pool-id {
              type uint32;
              mandatory true;
              description "Unique identifier for the pool.";
            }
            leaf pool-prefix {
              type inet:ipv6-prefix;
              mandatory true;
              description "IPv6 prefix for the pool.";
            }
            leaf client-prefix-length {
              type uint8;
              mandatory true;
              description "Length of the prefixes that will be 
                delegated to clients.";
            }
            leaf max-pd-space-utilization {
              type dhcpv6-common:threshold;
              mandatory true;
              description "Maximum percentage utilization of the 
                prefix pool in this pool.";
            }
            uses resource-config;
            container host-reservations {
              description "Configuration for host reservations 
                from the prefix pool.";
              list prefix-reservation {
                description "reserved prefix reservation";
                key reserved-prefix;
                leaf client-duid {
                  type binary;
                  description "Client DUID for the reservation.";
                }
                leaf reserved-prefix {
                  type inet:ipv6-prefix;
                  description "Reserved IPv6 prefix";
                }
                leaf reserved-prefix-len {
                  type uint8;
                  description "Reserved IPv6 prefix length.";
                }
              }
              uses resource-config;
            }
            container active-leases {
              description "Holds state related to for active client 
                prefix leases.";
              config false;
              leaf total-count {
                type uint64;
                mandatory true;
                description "The total number of prefixes in 
                  the pool.";
              }
              leaf allocated-count {
                type uint64;
                mandatory true;
                description "The number of prefixes in the pool 
                  that are currently allocated.";
              }
              list active-lease {
                key leased-prefix;
                leaf leased-prefix {
                  type inet:ipv6-prefix;
                }
                uses lease-information;
              }
            }
          }
        }
      }
      uses message-stats;
    }
  }

  /*
   * Notifications
   */

  notification address-pool-utilization-threshold-exceeded {
    description "Notification sent when the address pool 
      utilization exceeds the configured threshold.";
    leaf pool-id {
      type leafref {
        path "/dhcpv6-server/network-ranges/network-range/address-poo
ls/address-pool/pool-id";
      }
    }
    leaf total-address-count {
      type uint64;
      mandatory true;
      description "Count of the total addresses in the pool.";
    }
    leaf max-address-count {
      type uint64;
      mandatory true;
      description "Maximum count of addresses that can be allocated
        in the pool. This value may be less than count of total
        addresses.";
    }
    leaf allocated-address-count {
      type uint64;
      mandatory true;
      description "Count of allocated addresses in the pool.";
    }
  }

  notification prefix-pool-utilization-threshold-exceeded {
    description "Notification sent when the prefix pool 
      utilization exceeds the configured threshold.";
    if-feature prefix-delegation;
    leaf pool-id {
      type leafref {
        path "/dhcpv6-server/network-ranges/network-range/prefix-pool
s/prefix-pool/pool-id";
      }
      mandatory true;
    }
    leaf max-pd-space-utilization {
      description "PD space utilization threshold.";
      type leafref {
        path "/dhcpv6-server/network-ranges/network-range/prefix-pool
s/prefix-pool/max-pd-space-utilization";
      }
      mandatory true;
    }
    leaf pd-space-utilization {
      description "Current PD space utilization";
      type uint64;
    } 
  }

  notification invalid-client-detected {
    description "Notification sent when the server detects an 
      invalid client.";
    leaf duid {
      description "Client DUID.";
      type binary;
    }
    leaf description {
      type string;
      description "Description of the event (e.g. and error code or 
        log message).";
    }
  }

  notification decline-received {
    description "Notification sent when the server has received a
      Decline (9) message from a client.";
    leaf duid {
      description "Client DUID.";
      type binary;
    }
    list declined-resources {
      description "List of declined addresses and/or prefixes.";
      choice resource-type {
        case declined-address {
          leaf address {
            type inet:ipv6-address;
          }
        }
        case declined-prefix {
          leaf prefix {
            type inet:ipv6-prefix;
          }
        }
      }
    }
  }

  notification non-success-code-sent {
    description "Notification sent when the server responded
      to a client with non-success status code.";
    leaf status-code {
      type uint16;
      mandatory true;
      description "Status code returned to the client.";
    }
    leaf duid {
      description "Client DUID.";
      type binary;
    }
  }

  /*
   * RPCs
   */

  rpc delete-address-lease {
    nacm:default-deny-all;
    description "Deletes a client's active address lease from the 
      server's lease database. Note, this will not cause the address
      to be revoked from the client, and the lease may be refreshed
      or renewed by the client.";
    input {
      leaf lease-address-to-delete {
        type inet:ipv6-address;
          mandatory true;
        description "IPv6 address of an active lease that will be 
          deleted from the server.";
      }
    }
    output {
      leaf return-message {
        type string;
        description "Response message from the server.";
      }
    }
  }
  rpc delete-prefix-lease {
    nacm:default-deny-all;
    description "Deletes a client's active prefix lease from the 
      server's lease database. Note, this will not cause the prefix
      to be revoked from the client, and the lease may be refreshed
      or renewed by the client.";
    input {
      leaf lease-prefix-to-delete {
        type inet:ipv6-prefix;
          mandatory true;
        description "IPv6 prefix of an active lease that will be 
          deleted from the server.";
      }
    }
    output {
      leaf return-message {
        type string;
        description "Response message from the server.";
      }
    }
  }
}


<CODE ENDS>]]>
</artwork>
      </section>
      <section anchor="relay-module">
        <name>DHCPv6 Relay YANG Module</name>
        <t>This module imports typedefs from <xref target="RFC6991"/>,
          <xref target="RFC8343"/>.
        </t>
        <artwork align="center" xml:base="/home/if/Documents/yang/ietf-dhcpv6-relay.yang.xml">
<![CDATA[<CODE BEGINS> file "ietf-dhcpv6-relay.yang" 

module ietf-dhcpv6-relay {
  yang-version 1.1;
  namespace "urn:ietf:params:xml:ns:yang:ietf-dhcpv6-relay";
  prefix "dhcpv6-relay";

  import ietf-inet-types {
    prefix inet;
    reference
      "RFC 6991: Common YANG Data Types";
  }

  import ietf-yang-types {
    prefix yang;
    reference
      "RFC 6991: Common YANG Data Types";
  }

  import ietf-dhcpv6-common {
    prefix dhcpv6-common;
    reference
      "To be updated on publication";
  }

  import ietf-interfaces {
    prefix if;
    reference
      "RFC 8343: A YANG Data Model for Interface Management";
  }

  import ietf-netconf-acm {
    prefix nacm;
    reference
      "RFC 8341: Network Configuration Access Control Model";
  }

  organization
    "IETF DHC (Dynamic Host Configuration) Working group";

  contact
    "cuiyong@tsinghua.edu.cn
    lh.sunlinh@gmail.com
    ian.farrer@telekom.de
    sladjana.zechlin@telekom.de
    hezihao9512@gmail.com
    godfryd@isc.org";

  description
    "This YANG module defines components necessary for the 
    configuration and management of DHCPv6 relays.

    Copyright (c) 2018 IETF Trust and the persons identified as
    authors of the code.  All rights reserved.

    Redistribution and use in source and binary forms, with or
    without modification, is permitted pursuant to, and subject
    to the license terms contained in, the Simplified BSD License
    set forth in Section 4.c of the IETF Trust's Legal Provisions
    Relating to IETF Documents
    (http://trustee.ietf.org/license-info).

    This version of this YANG module is part of RFC 8513; see
    the RFC itself for full legal notices.";

  revision 2020-12-01 {
    description "Version update for draft -12 publication.";
    reference "I-D: draft-ietf-dhc-dhcpv6-yang-12";
  }

  revision 2020-05-26 {
    description "Version update for draft -11 publication and
      to align revisions across the different modules.";
    reference "I-D: draft-ietf-dhc-dhcpv6-yang-11";
  }

  revision 2019-09-20 {
    description "";
    reference "I-D: draft-ietf-dhc-dhcpv6-yang-10";
  }

  revision 2018-03-04 {
    description "Resolved most issues on the DHC official
      github";
    reference "I-D: draft-ietf-dhc-dhcpv6-yang";
  }

  revision 2017-12-22 {
    description
      "Resolve most issues on Ians Github.";
    reference
      "I-D: draft-ietf-dhc-dhcpv6-yang";
  }

  revision 2017-11-24 {
    description
      "First version of the separated relay specific
      YANG model.";
    reference
      "I-D: draft-ietf-dhc-dhcpv6-yang";
  }

  /*
   * Identities
   */

  identity relay {
    description "DHCPv6 relay agent identity.";
    base "dhcpv6-common:dhcpv6-node";
  }

  leaf dhcpv6-node-type {
    description "Type for a DHCPv6 relay.";
    type identityref {
      base "dhcpv6-common:dhcpv6-node";
    }
  }

  /*
   * Features
   */

  feature prefix-delegation {
    description "Enable if the relay functions as a delegating router
      for DHCPv6 prefix delegation.";
  }

  /*
   * Groupings
   */

  grouping pd-lease-state {
    description "State data for the relay.";
    list pd-leases {
      config false;
      key ia-pd-prefix;
      description "Information about an active IA_PD prefix
        delegation.";
     leaf ia-pd-prefix {
        description "Prefix that is delegated.";
        type inet:ipv6-prefix;
      }
      leaf last-renew {
        description "Time of the last successful refresh or renew
          of the delegated prefix.";
        type yang:date-and-time;
      }
      leaf client-peer-address {
        description "Peer-address of the client.";
        type inet:ipv6-address;
      }
      leaf client-duid {
        description "DUID of the leasing client.";
        type binary;
      }
      leaf server-duid {
        description "DUID of the delegating server.";
        type binary;
      }
    }
  }

  grouping message-statistics {
    description "Contains counters for the different DHCPv6 
      message types.";
    leaf solicit-received-count {
      config "false";
      type uint32;
      description "Number of Solicit (1) messages received.";
    }
    leaf advertise-sent-count {
      config "false";
      type uint32;
      description "Number of Advertise (2) messages sent.";
    }
    leaf request-received-count {
      config "false";
      type uint32;
      description "Number of Request (3) messages received.";
    }
    leaf confirm-received-count {
      config "false";
      type uint32;
      description "Number of Confirm (4) messages received.";
    }
    leaf renew-received-count {
      config "false";
      type uint32;
      description "Number of Renew (5) messages received.";
    }
    leaf rebind-received-count {
      config "false";
      type uint32;
      description "Number of Rebind (6) messages received.";
    }
    leaf reply-sent-count {
      config "false";
      type uint32;
      description "Number of Reply (7) messages received.";
    }
    leaf release-received-count {
      config "false";
      type uint32;
      description "Number of Release (8) messages sent.";
    }
    leaf decline-received-count {
      config "false";
      type uint32;
      description "Number of Decline (9) messages sent.";
    }
    leaf reconfigure-sent-count {
      config "false";
      type uint32;
      description "Number of Reconfigure (10) messages sent.";
    }
    leaf information-request-received-count {
      config "false";
      type uint32;
      description "Number of Information-request (11) messages
        received.";
    }
    leaf unknown-message-received-count {
      config "false";
      type uint32;
      description
        "Number of messages of unknown type that have been 
           received.";
    }
    leaf unknown-message-sent-count {
      config "false";
      type uint32;
      description
        "Number of messages of unknown type that have been sent.";
    }
    leaf discarded-message-count {
      config "false";
      type uint32;
      description
        "Number of messages that have been discarded for any 
           reason.";
    }
  }

  grouping global-statistics {
    leaf relay-forward-sent-count {
      config "false";
      type uint32;
      description "Number of Relay-forward (12) messages sent.";
    }
    leaf relay-forward-received-count {
      config "false";
      type uint32;
      description "Number of Relay-forward (12) messages received.";
    }
    leaf relay-reply-received-count {
      config "false";
      type uint32;
      description "Number of Relay-reply (13) messages received.";
    }
    leaf relay-forward-unknown-sent-count {
      config "false";
      type uint32;
      description "Number of Relay-forward (12) messages containing
        a message of unknown type sent.";
    }
    leaf relay-forward-unknown-received-count {
      config "false";
      type uint32;
      description "Number of Relay-forward (12) messages containing
        a message of unknown type received.";
    }
    leaf discarded-message-count {
      config "false";
      type uint32;
      description "Number of messages that have been discarded
        for any reason.";
    }
  }

  /*
   * Data Nodes
   */

  container dhcpv6-relay {
    description
      "This container contains the configuration data nodes for 
      the relay.";
    list relay-if {
      key if-name;
      leaf if-name {
        type if:interface-ref;
      }
      leaf-list destination-addresses {
        type inet:ipv6-address;
        description "Each DHCPv6 relay agent may be configured with
          a list of destination addresses for relayed messages.
          The list may include unicast addresses, multicast addresses
          or other valid addresses.";
      }
      leaf link-address {
        description "An address that may be used by the server
          to identify the link on which the client is located.";
        type binary {
          length "0..16";
        }
      }
      container relay-options {
        description "Definitions for DHCPv6 options that can be sent
          by the relay are augmented to this location from other YANG
          modules as required.";
      }
      uses message-statistics;
      container prefix-delegation {
        description "Controls and holds state information for prefix
          delegation.";
        presence "Enables prefix delegation for this interface.";
        if-feature prefix-delegation;
        uses pd-lease-state;
      }
    }
    uses global-statistics;
  }

  /*
   * Notifications
   */

  notification relay-event {
    description
      "DHCPv6 relay event notifications.";
    container topology-change {
      description "Raised if the entry for and interface with DHCPv6
        related configuration or state is removed from 
        if:interface-refs.";
      leaf relay-if-name {
        description "Name of the interface that has been removed.";
        type leafref {
          path "/dhcpv6-relay/relay-if/if-name";
        }
      }
      leaf last-ipv6-addr {
        type inet:ipv6-address;
        description "Last IPv6 address configured on the interface.";
      }
    }
  }

  /*
   * RPCs
   */

  rpc clear-prefix-entry {
    nacm:default-deny-all;
    description "Clears an entry for an active delegated prefix
      from the relay.";
    input {
      leaf lease-prefix {
        type inet:ipv6-prefix;
        mandatory true;
        description "IPv6 prefix of an active lease entry that will b
e
          deleted from the relay.";
      }
    }
    output {
      leaf return-message {
        type string;
        description "Response message from the relay.";
      }
    }
  }
  rpc clear-client-prefixes {
    nacm:default-deny-all;
    description "Clears all active prefix entries for a single client
.";
    input {
      leaf client-duid {
        type binary;
        mandatory true;
        description "DUID of the client .";
      }
    }
    output {
      leaf return-message {
        type string;
        description "Response message from the relay.";
      }
    }
  }
  rpc clear-interface-prefixes {
    nacm:default-deny-all;
    description "Clears all delegated prefix bindings from an 
      interface on the relay.";
    input {
      leaf interface {
        type if:interface-ref;
        mandatory true;
        description "Reference to the relay interface that will have
          all active prefix delegation bindings deleted.";
      }
    }
    output {
      leaf return-message {
        type string;
        description "Response message from the relay.";
      }
    }
  }
}
<CODE ENDS>]]>
</artwork>
      </section>
      <section anchor="client-module">
        <name>DHCPv6 Client YANG Module</name>
        <t>This module imports typedefs from <xref target="RFC6991"/>,
          <xref target="RFC8343"/>.</t>
        <artwork align="center" xml:base="/home/if/Documents/yang/ietf-dhcpv6-client.yang.xml">
<![CDATA[<CODE BEGINS> file "ietf-dhcpv6-client.yang" 

module ietf-dhcpv6-client {
  yang-version 1.1;
  namespace "urn:ietf:params:xml:ns:yang:ietf-dhcpv6-client";
  prefix "dhcpv6-client";

  import ietf-inet-types {
    prefix inet;
    reference
      "RFC 6991: Common YANG Data Types";
  }

  import ietf-yang-types {
    prefix yang;
    reference
      "RFC 6991: Common YANG Data Types";
  }

  import ietf-dhcpv6-common {
    prefix dhcpv6-common;
    reference
      "To be updated on publication";
  }

  import ietf-interfaces {
    prefix if;
    reference
      "RFC 8343: A YANG Data Model for Interface Management";
  }

  organization "DHC WG";
  contact
    "cuiyong@tsinghua.edu.cn
    wangh13@mails.tsinghua.edu.cn
    lh.sunlinh@gmail.com
    ian.farrer@telekom.de
    sladjana.zechlin@telekom.de
    hezihao9512@gmail.com
    godfryd@isc.org";

  description 
    "This YANG module defines components necessary for the 
    configuration and management of DHCPv6 clients.

    Copyright (c) 2018 IETF Trust and the persons identified as
    authors of the code.  All rights reserved.

    Redistribution and use in source and binary forms, with or
    without modification, is permitted pursuant to, and subject
    to the license terms contained in, the Simplified BSD License
    set forth in Section 4.c of the IETF Trust's Legal Provisions
    Relating to IETF Documents
    (http://trustee.ietf.org/license-info).

    This version of this YANG module is part of RFC 8513; see
    the RFC itself for full legal notices.";

  revision 2020-12-01 {
    description "Version update for draft -12 publication.";
    reference "I-D: draft-ietf-dhc-dhcpv6-yang-12";
  }

  revision 2020-05-26 {
    description "Version update for draft -11 publication and
      to align revisions across the different modules.";
    reference "I-D: draft-ietf-dhc-dhcpv6-yang-11";
  }

  revision 2019-09-20 {
    description "";
    reference "I-D: draft-ietf-dhc-dhcpv6-yang-10";
  }

  revision 2018-09-04 {
    description "";
    reference "I-D: draft-ietf-dhc-dhcpv6-yang";
  }

  revision 2018-03-04 {
    description "Resolved most issues on the DHC official github";
    reference "I-D: draft-ietf-dhc-dhcpv6-yang";
  }

  revision 2017-12-22 {
    description "Resolve most issues on Ian's Github.";
    reference "I-D: draft-ietf-dhc-dhcpv6-yang";
  }

  revision 2017-11-24 {
    description "First version of the separated client specific
      YANG model.";
    reference "I-D: draft-ietf-dhc-dhcpv6-yang";
  }

  /*
   * Identities
   */

  identity client {
    base "dhcpv6-common:dhcpv6-node";
    description "DHCPv6 client identity.";
  }

  leaf dhcpv6-node-type {
    description "Type for a DHCPv6 client.";
    type identityref {
      base "dhcpv6-common:dhcpv6-node";
    }
  }


  /*
   * Groupings
   */
  
  grouping message-statistics {
    description "Counters for DHCPv6 messages.";
    leaf solicit-count {
      config "false";
      type uint32;
      description "Number of Solicit (1) messages sent.";
    }
    leaf advertise-count {
      config "false";
      type uint32;
      description "Number of Advertise (2) messages received.";
    }
    leaf request-count {
      config "false";
      type uint32;
      description "Number of Request (3) messages sent.";
    }
    leaf confirm-count {
      config "false";
      type uint32;
      description "Number of Confirm (4) messages sent.";
    }
    leaf renew-count {
      config "false";
      type uint32;
      description "Number of Renew (5) messages sent.";
    }
    leaf rebind-count {
      config "false";
      type uint32;
      description "Number of Rebind (6) messages sent.";
    }
    leaf reply-count {
      config "false";
      type uint32;
      description "Number of Reply (7) messages received.";
    }
    leaf release-count {
      config "false";
      type uint32;
      description "Number of Release (8) messages sent.";
    }
    leaf decline-count {
      config "false";
      type uint32;
      description "Number of Decline (9) messages sent.";
    }
    leaf reconfigure-count {
      config "false";
      type uint32;
      description "Number of Reconfigure (10) messages received.";
    }
    leaf information-request-count {
      config "false";
      type uint32;
      description "Number of Information-request (11) messages
        sent.";
    }
  }

  /*
   * Data Nodes
   */

  container dhcpv6-client {
    description "DHCPv6 client configuration and state.";
    list client-if {
      key if-name;
      description "The list of interfaces that the client will be
        requesting DHCPv6 configuration for.";
      leaf if-name {
        type if:interface-ref;
        mandatory true;
        description "Reference to the interface entry that
          the requested configuration is relevant to.";
      }
      uses dhcpv6-common:duid;
      container client-configured-options {
        description "Definitions for DHCPv6 options that can be be
          sent by the client are augmented to this location from
          other YANG modules as required.";
      }
      list ia-na {
        key iaid;
        description "Configuration relevant for an IA_NA.";
        reference "RFC8415: Dynamic Host Configuration Protocol
          for IPv6 (DHCPv6).";
        leaf iaid {
          type uint32;
          description "A unique identifier for this IA_NA.";
        }
        container ia-na-options {
          description "An augmentation point for additional options
            that the client will send in the IA_NA-options field
            of OPTION_IA_NA.";
        }
        container lease-state {
          config "false";
          description "Information about the active IA_NA lease.";
          leaf ia-na-address {
            description "Address that is currently leased.";
            type inet:ipv6-address;
          }
          leaf preferred-lifetime {
            description "The preferred lifetime for the leased
              address expressed in units of seconds.";
            type dhcpv6-common:timer-seconds32;
          }
          leaf valid-lifetime {
            description "The valid lifetime for the leased address
              expressed in units of seconds.";
            type dhcpv6-common:timer-seconds32;
          }
          leaf lease-t1 {
            description "The time interval after which the client
              should contact the server from which the addresses
              in the IA_NA were obtained to extend the lifetimes
              of the addresses assigned to the IA_NA.";
            type dhcpv6-common:timer-seconds32;
          }
          leaf lease-t2 {
            description "The time interval after which the client
              should contact any available server to extend
              the lifetimes of the addresses assigned to the IA_NA.";
            type dhcpv6-common:timer-seconds32;
          }
          leaf allocation-time {
            description "Time and date that the address was first
              leased.";
            type yang:date-and-time;
          }
          leaf last-renew-rebind {
            description "Time of the last successful renew or rebind
              of the leased address.";
            type yang:date-and-time;
          }
          leaf server-duid {
            description "DUID of the leasing server.";
            type binary;
          }
        }
      }
      list ia-ta {
        key iaid;
        description "Configuration relevant for an IA_TA.";
        reference "RFC8415: Dynamic Host Configuration Protocol for
          IPv6 (DHCPv6).";
          leaf iaid {
            type uint32;
            description "The unique identifier for this IA_TA.";
          }
        container ia-ta-options {
          description "An augmentation point for additional options
            that the client will send in the IA_TA-options field
            of OPTION_IA_TA.";
        }
        container lease-state {
          config "false";
          description "Information about an active IA_TA lease.";
          leaf ia-ta-address {
            description "Address that is currently leased.";
            type inet:ipv6-address;
          }
          leaf preferred-lifetime {
            description "The preferred lifetime for the leased
              address expressed in units of seconds.";
            type dhcpv6-common:timer-seconds32;
          }
          leaf valid-lifetime {
            description "The valid lifetime for the leased address
              expressed in units of seconds.";
            type dhcpv6-common:timer-seconds32;
          }
          leaf allocation-time {
            description "Time and date that the address was first
              leased.";
            type yang:date-and-time;
          }
          leaf last-renew-rebind {
            description "Time of the last successful renew or rebind
              of the address.";
            type yang:date-and-time;
          }
          leaf server-duid {
            description "DUID of the leasing server.";
            type binary;
          }
        }
      }
      list ia-pd {
        key iaid;
        reference "RFC8415: Dynamic Host Configuration Protocol for
          IPv6 (DHCPv6).";
        description "Configuration relevant for an IA_PD.";
        leaf iaid {
          type uint32;
          description "The unique identifier for this IA_PD.";
        }
        container ia-pd-options {
          description "An augmentation point for additional options
            that the client will send in the IA_PD-options field
            of OPTION_IA_TA.";
        }
        container lease-state {
          config "false";
          description "Information about an active IA_PD delegated
            prefix.";
          leaf ia-pd-prefix {
            description "Delegated prefix that is currently leased.";
            type inet:ipv6-prefix;
          }
          leaf preferred-lifetime {
            description "The preferred lifetime for the leased prefix
              expressed in units of seconds.";
            type dhcpv6-common:timer-seconds32;
          }
          leaf valid-lifetime {
            description "The valid lifetime for the leased prefix
              expressed in units of seconds.";
            type dhcpv6-common:timer-seconds32;
          }
          leaf lease-t1 {
            description "The time interval after which the client
              should contact the server from which the addresses
              in the IA_NA were obtained to extend the lifetimes
              of the addresses assigned to the IA_PD.";
            type dhcpv6-common:timer-seconds32;
          }
          leaf lease-t2 {
            description "The time interval after which the client
              should contact any available server to extend
              the lifetimes of the addresses assigned to the IA_PD.";
            type dhcpv6-common:timer-seconds32;
          }
          leaf allocation-time {
            description "Time and date that the prefix was first
              leased.";
            type yang:date-and-time;
          }
          leaf last-renew-rebind {
            description "Time of the last successful renew or rebind
              of the delegated prefix.";
            type yang:date-and-time;
          }
          leaf server-duid {
            description "DUID of the delegating server.";
            type binary;
          }
        }
      }
      uses message-statistics;
    }
  }

  /*
   * Notifications
   */

  notification invalid-ia-detected {
    description "Notification sent when the identity association
      of the client can be proved to be invalid. Possible conditions
      include a duplicate or otherwise illegal address.";
    leaf iaid {
      type uint32;
      mandatory true;
      description "IAID";
    }
    leaf description {
      type string;
      description "Description of the event.";
    }
  }

  notification retransmission-failed {
    description "Notification sent when the retransmission mechanism
      defined in [RFC8415] is unsuccessful.";
    leaf failure-type {
      type enumeration {
        enum "MRC-exceeded" {
          description "Maximum retransmission count exceeded.";
        }
        enum "MRD-exceeded" {
          description "Maximum retransmission duration exceeded.";
        }
      }
      mandatory true;
      description "Description of the failure.";
    }
  }

  notification unsuccessful-status-code {
    description "Notification sent when the client receives a message
      that includes an unsuccessful Status Code option.";
    leaf status-code {
      type uint16;
      mandatory true;
      description "Unsuccessful status code received by a client.";
    }
    leaf server-duid {
      description "DUID of the server sending the unsuccessful
        error code.";
      mandatory true;
      type binary;
    }
  }

  notification server-duid-changed {
    description "Notification sent when the client receives a lease
      from a server with different DUID to the one currently stored
      by the client.";
    leaf new-server-duid {
      description "DUID of the new server.";
      mandatory true;
      type binary;
    }
    leaf previous-server-duid {
      description "DUID of the previous server.";
      mandatory true;
      type binary;
    }
    leaf lease-ia-na {
      description "Reference to the IA_NA lease.";
      type leafref {
        path "/dhcpv6-client/client-if/ia-na/iaid";
      }
    }
    leaf lease-ia-ta {
      description "Reference to the IA_TA lease.";
      type leafref {
        path "/dhcpv6-client/client-if/ia-ta/iaid";
      }
    }
    leaf lease-ia-pd {
      description "Reference to the IA_PD lease.";
      type leafref {
        path "/dhcpv6-client/client-if/ia-pd/iaid";
      }
    }
  }
}
<CODE ENDS>]]>
</artwork>
      </section>
      <section anchor="server-options-module">
        <name>RFC8415 Server Options YANG Module</name>
        <t>This module imports typedefs from <xref target="RFC6991"/>.
        </t>
        <artwork align="center" xml:base="/home/if/Documents/yang/ietf-dhcpv6-options-rfc8415-server.yang.xml">
<![CDATA[<CODE BEGINS> file "ietf-dhcpv6-options-rfc8415-server.yang" 

module ietf-dhcpv6-options-rfc8415 {
  yang-version 1.1;
  namespace "urn:ietf:params:xml:ns:yang:ietf-dhcpv6-options-8415-ser
ver";
  prefix "rfc8415-srv";

  import ietf-inet-types {
    prefix inet;
    reference
      "RFC 6991: Common YANG Data Types";
  }

  import ietf-dhcpv6-common {
    prefix dhcpv6-common;
    reference
      "To be updated on publication";
  }

  import ietf-dhcpv6-server {
    prefix dhcpv6-server;
    reference
      "To be updated on publication";
  }

  organization "DHC WG";
  contact
    "cuiyong@tsinghua.edu.cn
    wangh13@mails.tsinghua.edu.cn
    lh.sunlinh@gmail.com
    ian.farrer@telekom.de
    sladjana.zechlin@telekom.de
    hezihao9512@gmail.com";

  description "This YANG module contains DHCPv6 options defined
    in RFC8415 that can be used by DHCPv6 servers.";

  revision 2020-12-01 {
    description "Version update for draft -12 publication.";
    reference "I-D: draft-ietf-dhc-dhcpv6-yang-12";
  }

  revision 2020-11-19 {
    description "Separated into a client specific set of options.";
    reference "I-D: draft-ietf-dhc-dhcpv6-yang-12";
  }

  revision 2020-05-26 {
    description "Version update for draft -11 publication and
      to align revisions across the different modules.";
    reference "I-D: draft-ietf-dhc-dhcpv6-yang-11";
  }

  revision 2019-06-07 {
    description "Major reworking to only contain RFC8415 options.
      if-feature for each option removed. Removed groupings
        of features by device or combination of devices. Added ";
    reference "I-D: draft-ietf-dhc-dhcpv6-yang";
  }

  revision 2018-09-04 {
    description "";
    reference "I-D: draft-ietf-dhc-dhcpv6-yang";
  }

  revision 2018-03-04 {
    description "Resolved most issues on the DHC official
      github";
    reference "I-D: draft-ietf-dhc-dhcpv6-yang";
  }

  revision 2017-12-22 {
    description "Resolve most issues on Ian's github.";
    reference "I-D: draft-ietf-dhc-dhcpv6-yang";
  }

  revision 2017-11-24 {
    description "First version of the separated DHCPv6 options
      YANG model.";
    reference "I-D:draft-ietf-dhc-dhcpv6-yang";
  }

  /*
   * Groupings
   */

  grouping preference-option-group {
    container preference-option {
      description "OPTION_PREFERENCE (7) Preference Option";
      reference "RFC8415: Dynamic Host Configuration Protocol for
        IPv6 (DHCPv6)";
      leaf pref-value {
        type uint8;
        description "The preference value for the server in this
          message. A 1-octet unsigned integer.";
      }
    }
  }

  grouping auth-option-group {
    container auth-option {
      description "OPTION_AUTH (11) Authentication Option";
      reference "RFC8415: Dynamic Host Configuration Protocol
        for IPv6 (DHCPv6)";
      leaf protocol {
        type uint8;
        description "The authentication protocol used in this
          Authentication option.";
      }
      leaf algorithm {
        type uint8;
        description "The algorithm used in the authentication
          protocol.";
      }
      leaf rdm {
        type uint8;
        description "The replay detection method used
          in this Authentication option.";
      }
      leaf replay-detection {
        type uint64;
        description "The replay detection information for the RDM.";
      }
      leaf auth-information {
        type string;
        description "The authentication information, as specified
          by the protocol and algorithm used in this Authentication
          option.";
      }
    }
  }

  grouping server-unicast-option-group {
    container server-unicast-option {
      description "OPTION_UNICAST (12) Server Unicast Option";
      reference "RFC8415: Dynamic Host Configuration Protocol for
        IPv6 (DHCPv6)";
      leaf server-address {
        type inet:ipv6-address;
        description "The 128-bit address to which the client
          should send messages delivered using unicast.";
      }
    }
  }

  grouping status-code-option-group {
    container status-code-option {
      description "OPTION_STATUS_CODE (13) Status Code Option.";
      reference "RFC8415: Dynamic Host Configuration Protocol
        for IPv6 (DHCPv6)";
      leaf status-code {
        type uint16;
        description "The numeric code for the status encoded
          in this option. See the Status Codes registry at
          <https://www.iana.org/assignments/dhcpv6-parameters>
          for the current list of status codes.";
      }
      leaf status-message {
        type string;
        description "A UTF-8 encoded text string suitable for
          display to an end user. MUST NOT be null-terminated.";
      }
    }
  }

  grouping rapid-commit-option-group {
    container rapid-commit-option {
      presence "Enable sending of this option";
      description "OPTION_RAPID_COMMIT (14) Rapid Commit Option.
        The presence node is used to enable the option.";
      reference "RFC8415: Dynamic Host Configuration Protocol for
        IPv6 (DHCPv6)";
    }
  }

  grouping vendor-specific-information-option-group {
    container vendor-specific-information-option {
      description "OPTION_VENDOR_OPTS (17) Vendor-specific
        Information Option";
      reference "RFC8415: Dynamic Host Configuration Protocol
        for IPv6 (DHCPv6)";
      list vendor-specific-information-option-instances {
        key enterprise-number;
        description "The vendor specific information option allows
          for multiple instances in a single message. Each list entry
            defines the contents of an instance of the option.";
        leaf enterprise-number {
          type uint32;
          description "The vendor's registered Enterprise Number,
                      as maintained by IANA.";
        }
        list vendor-option-data {
          key sub-option-code;
          description "Vendor options, interpreted by vendor-specific
            client/server functions.";
          leaf sub-option-code {
            type uint16;
            description "The code for the sub-option.";
          }
          leaf sub-option-data {
            type string;
            description "The data area for the sub-option.";
          }
        }
      }
    }
  }

  grouping reconfigure-message-option-group {
    container reconfigure-message-option {
      description "OPTION_RECONF_MSG (19) Reconfigure Message
        Option.";
      reference "RFC8415: Dynamic Host Configuration Protocol for 
        IPv6 (DHCPv6)";
      leaf msg-type {
        type uint8;
        description "5 for Renew message, 6 for Rebind message,
                    11 for Information-request message.";
      }
    }
  }

  grouping reconfigure-accept-option-group {
    container reconfigure-accept-option {
      presence "Enable sending of this option";
      description "OPTION_RECONF_ACCEPT (20)  Reconfigure Accept 
        Option.
        A client uses the Reconfigure Accept option to announce to 
        the server whether the client is willing to accept
        Reconfigure messages, and a server uses this option to tell
        the client whether or not to accept Reconfigure messages.
        In the absence of this option, the default behavior is that
        the client is unwilling to accept Reconfigure messages.
        The presence node is used to enable the option.";
      reference "RFC8415: Dynamic Host Configuration Protocol
        for IPv6 (DHCPv6)";
    }
  }

  grouping info-refresh-time-option-group {
    container info-refresh-time-option {
      description "OPTION_INFORMATION_REFRESH_TIME (32)
        Information Refresh Time option.";
      reference "RFC8415: Dynamic Host Configuration Protocol for
        IPv6 (DHCPv6)";
      leaf info-refresh-time {
        type dhcpv6-common:timer-seconds32;
        description "Time duration relative to the current time,
                    expressed in units of seconds.";
      }
    }
  }

  grouping sol-max-rt-option-group {
    container sol-max-rt-option {
      description "OPTION_SOL_MAX_RT (82) sol max rt option";
      reference "RFC8415: Dynamic Host Configuration Protocol for
        IPv6 (DHCPv6)";
      leaf sol-max-rt-value {
        type dhcpv6-common:timer-seconds32;
        description "sol max rt value";
      }
    }
  }

  grouping inf-max-rt-option-group {
    container inf-max-rt-option {
      description "OPTION_INF_MAX_RT (83) inf max rt option";
      reference "RFC8415: Dynamic Host Configuration Protocol for
        IPv6 (DHCPv6)";
      leaf inf-max-rt-value {
        type dhcpv6-common:timer-seconds32;
        description "inf max rt value";
      }
    }
  }

  /*
   * Augmentations
   */

  augment "/dhcpv6-server:dhcpv6-server/dhcpv6-server:option-sets/dhc
pv6-server:option-set" {
    when "../../../dhcpv6-server:dhcpv6-node-type='dhcpv6-server:serv
er'";
    uses preference-option-group;
    uses auth-option-group;
    uses server-unicast-option-group;
    uses status-code-option-group;
    uses rapid-commit-option-group;
    uses vendor-specific-information-option-group;
    uses reconfigure-message-option-group;
    uses reconfigure-accept-option-group;
    uses info-refresh-time-option-group;
    uses sol-max-rt-option-group;
    uses inf-max-rt-option-group;
  }
}
<CODE ENDS>]]>
</artwork>
      </section>
      <section anchor="relay-options-module">
        <name>RFC8415 Relay Options YANG Module</name>
        <t>This module imports typedefs from <xref target="RFC6991"/>.
        </t>
        <artwork align="center" xml:base="/home/if/Documents/yang/ietf-dhcpv6-options-rfc8415-server.yang.xml">
<![CDATA[<CODE BEGINS> file "ietf-dhcpv6-options-rfc8415-server.yang" 

module ietf-dhcpv6-options-rfc8415 {
  yang-version 1.1;
  namespace "urn:ietf:params:xml:ns:yang:ietf-dhcpv6-options-8415-ser
ver";
  prefix "rfc8415-srv";

  import ietf-inet-types {
    prefix inet;
    reference
      "RFC 6991: Common YANG Data Types";
  }

  import ietf-dhcpv6-common {
    prefix dhcpv6-common;
    reference
      "To be updated on publication";
  }

  import ietf-dhcpv6-server {
    prefix dhcpv6-server;
    reference
      "To be updated on publication";
  }

  organization "DHC WG";
  contact
    "cuiyong@tsinghua.edu.cn
    wangh13@mails.tsinghua.edu.cn
    lh.sunlinh@gmail.com
    ian.farrer@telekom.de
    sladjana.zechlin@telekom.de
    hezihao9512@gmail.com";

  description "This YANG module contains DHCPv6 options defined
    in RFC8415 that can be used by DHCPv6 servers.";

  revision 2020-12-01 {
    description "Version update for draft -12 publication.";
    reference "I-D: draft-ietf-dhc-dhcpv6-yang-12";
  }

  revision 2020-11-19 {
    description "Separated into a client specific set of options.";
    reference "I-D: draft-ietf-dhc-dhcpv6-yang-12";
  }

  revision 2020-05-26 {
    description "Version update for draft -11 publication and
      to align revisions across the different modules.";
    reference "I-D: draft-ietf-dhc-dhcpv6-yang-11";
  }

  revision 2019-06-07 {
    description "Major reworking to only contain RFC8415 options.
      if-feature for each option removed. Removed groupings
        of features by device or combination of devices. Added ";
    reference "I-D: draft-ietf-dhc-dhcpv6-yang";
  }

  revision 2018-09-04 {
    description "";
    reference "I-D: draft-ietf-dhc-dhcpv6-yang";
  }

  revision 2018-03-04 {
    description "Resolved most issues on the DHC official
      github";
    reference "I-D: draft-ietf-dhc-dhcpv6-yang";
  }

  revision 2017-12-22 {
    description "Resolve most issues on Ian's github.";
    reference "I-D: draft-ietf-dhc-dhcpv6-yang";
  }

  revision 2017-11-24 {
    description "First version of the separated DHCPv6 options
      YANG model.";
    reference "I-D:draft-ietf-dhc-dhcpv6-yang";
  }

  /*
   * Groupings
   */

  grouping preference-option-group {
    container preference-option {
      description "OPTION_PREFERENCE (7) Preference Option";
      reference "RFC8415: Dynamic Host Configuration Protocol for
        IPv6 (DHCPv6)";
      leaf pref-value {
        type uint8;
        description "The preference value for the server in this
          message. A 1-octet unsigned integer.";
      }
    }
  }

  grouping auth-option-group {
    container auth-option {
      description "OPTION_AUTH (11) Authentication Option";
      reference "RFC8415: Dynamic Host Configuration Protocol
        for IPv6 (DHCPv6)";
      leaf protocol {
        type uint8;
        description "The authentication protocol used in this
          Authentication option.";
      }
      leaf algorithm {
        type uint8;
        description "The algorithm used in the authentication
          protocol.";
      }
      leaf rdm {
        type uint8;
        description "The replay detection method used
          in this Authentication option.";
      }
      leaf replay-detection {
        type uint64;
        description "The replay detection information for the RDM.";
      }
      leaf auth-information {
        type string;
        description "The authentication information, as specified
          by the protocol and algorithm used in this Authentication
          option.";
      }
    }
  }

  grouping server-unicast-option-group {
    container server-unicast-option {
      description "OPTION_UNICAST (12) Server Unicast Option";
      reference "RFC8415: Dynamic Host Configuration Protocol for
        IPv6 (DHCPv6)";
      leaf server-address {
        type inet:ipv6-address;
        description "The 128-bit address to which the client
          should send messages delivered using unicast.";
      }
    }
  }

  grouping status-code-option-group {
    container status-code-option {
      description "OPTION_STATUS_CODE (13) Status Code Option.";
      reference "RFC8415: Dynamic Host Configuration Protocol
        for IPv6 (DHCPv6)";
      leaf status-code {
        type uint16;
        description "The numeric code for the status encoded
          in this option. See the Status Codes registry at
          <https://www.iana.org/assignments/dhcpv6-parameters>
          for the current list of status codes.";
      }
      leaf status-message {
        type string;
        description "A UTF-8 encoded text string suitable for
          display to an end user. MUST NOT be null-terminated.";
      }
    }
  }

  grouping rapid-commit-option-group {
    container rapid-commit-option {
      presence "Enable sending of this option";
      description "OPTION_RAPID_COMMIT (14) Rapid Commit Option.
        The presence node is used to enable the option.";
      reference "RFC8415: Dynamic Host Configuration Protocol for
        IPv6 (DHCPv6)";
    }
  }

  grouping vendor-specific-information-option-group {
    container vendor-specific-information-option {
      description "OPTION_VENDOR_OPTS (17) Vendor-specific
        Information Option";
      reference "RFC8415: Dynamic Host Configuration Protocol
        for IPv6 (DHCPv6)";
      list vendor-specific-information-option-instances {
        key enterprise-number;
        description "The vendor specific information option allows
          for multiple instances in a single message. Each list entry
            defines the contents of an instance of the option.";
        leaf enterprise-number {
          type uint32;
          description "The vendor's registered Enterprise Number,
                      as maintained by IANA.";
        }
        list vendor-option-data {
          key sub-option-code;
          description "Vendor options, interpreted by vendor-specific
            client/server functions.";
          leaf sub-option-code {
            type uint16;
            description "The code for the sub-option.";
          }
          leaf sub-option-data {
            type string;
            description "The data area for the sub-option.";
          }
        }
      }
    }
  }

  grouping reconfigure-message-option-group {
    container reconfigure-message-option {
      description "OPTION_RECONF_MSG (19) Reconfigure Message
        Option.";
      reference "RFC8415: Dynamic Host Configuration Protocol for 
        IPv6 (DHCPv6)";
      leaf msg-type {
        type uint8;
        description "5 for Renew message, 6 for Rebind message,
                    11 for Information-request message.";
      }
    }
  }

  grouping reconfigure-accept-option-group {
    container reconfigure-accept-option {
      presence "Enable sending of this option";
      description "OPTION_RECONF_ACCEPT (20)  Reconfigure Accept 
        Option.
        A client uses the Reconfigure Accept option to announce to 
        the server whether the client is willing to accept
        Reconfigure messages, and a server uses this option to tell
        the client whether or not to accept Reconfigure messages.
        In the absence of this option, the default behavior is that
        the client is unwilling to accept Reconfigure messages.
        The presence node is used to enable the option.";
      reference "RFC8415: Dynamic Host Configuration Protocol
        for IPv6 (DHCPv6)";
    }
  }

  grouping info-refresh-time-option-group {
    container info-refresh-time-option {
      description "OPTION_INFORMATION_REFRESH_TIME (32)
        Information Refresh Time option.";
      reference "RFC8415: Dynamic Host Configuration Protocol for
        IPv6 (DHCPv6)";
      leaf info-refresh-time {
        type dhcpv6-common:timer-seconds32;
        description "Time duration relative to the current time,
                    expressed in units of seconds.";
      }
    }
  }

  grouping sol-max-rt-option-group {
    container sol-max-rt-option {
      description "OPTION_SOL_MAX_RT (82) sol max rt option";
      reference "RFC8415: Dynamic Host Configuration Protocol for
        IPv6 (DHCPv6)";
      leaf sol-max-rt-value {
        type dhcpv6-common:timer-seconds32;
        description "sol max rt value";
      }
    }
  }

  grouping inf-max-rt-option-group {
    container inf-max-rt-option {
      description "OPTION_INF_MAX_RT (83) inf max rt option";
      reference "RFC8415: Dynamic Host Configuration Protocol for
        IPv6 (DHCPv6)";
      leaf inf-max-rt-value {
        type dhcpv6-common:timer-seconds32;
        description "inf max rt value";
      }
    }
  }

  /*
   * Augmentations
   */

  augment "/dhcpv6-server:dhcpv6-server/dhcpv6-server:option-sets/dhc
pv6-server:option-set" {
    when "../../../dhcpv6-server:dhcpv6-node-type='dhcpv6-server:serv
er'";
    uses preference-option-group;
    uses auth-option-group;
    uses server-unicast-option-group;
    uses status-code-option-group;
    uses rapid-commit-option-group;
    uses vendor-specific-information-option-group;
    uses reconfigure-message-option-group;
    uses reconfigure-accept-option-group;
    uses info-refresh-time-option-group;
    uses sol-max-rt-option-group;
    uses inf-max-rt-option-group;
  }
}
<CODE ENDS>]]>
</artwork>
      </section>
      <section anchor="client-options-module">
        <name>RFC8415 Client Options YANG Module</name>
        <t>This module imports typedefs from <xref target="RFC6991"/>.
        </t>
        <artwork align="center" xml:base="/home/if/Documents/yang/ietf-dhcpv6-options-rfc8415-client.yang.xml">
<![CDATA[<CODE BEGINS> file "ietf-dhcpv6-options-rfc8415-client.yang" 

module ietf-dhcpv6-options-rfc8415 {
  yang-version 1.1;
  namespace "urn:ietf:params:xml:ns:yang:ietf-dhcpv6-options-8415-cli
ent";
  prefix "rfc8415-cli";

  import ietf-inet-types {
    prefix inet;
    reference
      "RFC 6991: Common YANG Data Types";
  }

  import ietf-dhcpv6-common {
    prefix dhcpv6-common;
    reference
      "To be updated on publication";
  }

  import ietf-dhcpv6-client {
    prefix dhcpv6-client;
    reference
      "To be updated on publication";
  }

  organization "DHC WG";
  contact
    "cuiyong@tsinghua.edu.cn
    wangh13@mails.tsinghua.edu.cn
    lh.sunlinh@gmail.com
    ian.farrer@telekom.de
    sladjana.zechlin@telekom.de
    hezihao9512@gmail.com";

  description "This YANG module contains DHCPv6 options defined
    in RFC8415 that can be used by DHCPv6 clients.";

  revision 2020-12-01 {
    description "Version update for draft -12 publication.";
    reference "I-D: draft-ietf-dhc-dhcpv6-yang-12";
  }

  revision 2020-11-19 {
    description "Separated into a client specific set of options.";
    reference "I-D: draft-ietf-dhc-dhcpv6-yang-12";
  }

  revision 2020-05-26 {
    description "Version update for draft -11 publication and
      to align revisions across the different modules.";
    reference "I-D: draft-ietf-dhc-dhcpv6-yang-11";
  }

  revision 2019-06-07 {
    description "Major reworking to only contain RFC8415 options.
      if-feature for each option removed. Removed groupings
        of features by device or combination of devices. Added ";
    reference "I-D: draft-ietf-dhc-dhcpv6-yang";
  }

  revision 2018-09-04 {
    description "";
    reference "I-D: draft-ietf-dhc-dhcpv6-yang";
  }

  revision 2018-03-04 {
    description "Resolved most issues on the DHC official
      github";
    reference "I-D: draft-ietf-dhc-dhcpv6-yang";
  }

  revision 2017-12-22 {
    description "Resolve most issues on Ian's github.";
    reference "I-D: draft-ietf-dhc-dhcpv6-yang";
  }

  revision 2017-11-24 {
    description "First version of the separated DHCPv6 options
      YANG model.";
    reference "I-D:draft-ietf-dhc-dhcpv6-yang";
  }

  /*
   * Groupings
   */

  grouping option-request-option-group {
    container option-request-option {
      description "OPTION_ORO (6) Option Request Option. A client
        MUST include an Option Request option in a Solicit, Request,
             Renew, Rebind, or Information-request message to inform
               the server about options the client wants the server t
o send
               to the client.";
      reference "RFC8415: Dynamic Host Configuration Protocol for
        IPv6 (DHCPv6)";
      leaf-list oro-option {
        description "List of options that the client is requesting,
                    identified by option code";
        type uint16; 
      }
    }
  }

  grouping status-code-option-group {
    container status-code-option {
      description "OPTION_STATUS_CODE (13) Status Code Option.";
      reference "RFC8415: Dynamic Host Configuration Protocol
        for IPv6 (DHCPv6)";
      leaf status-code {
        type uint16;
        description "The numeric code for the status encoded
          in this option. See the Status Codes registry at
          <https://www.iana.org/assignments/dhcpv6-parameters>
          for the current list of status codes.";
      }
      leaf status-message {
        type string;
        description "A UTF-8 encoded text string suitable for
          display to an end user. MUST NOT be null-terminated.";
      }
    }
  }

  grouping rapid-commit-option-group {
    container rapid-commit-option {
      presence "Enable sending of this option";
      description "OPTION_RAPID_COMMIT (14) Rapid Commit Option.
        The presence node is used to enable the option.";
      reference "RFC8415: Dynamic Host Configuration Protocol for
        IPv6 (DHCPv6)";
    }
  }

  grouping user-class-option-group {
    container user-class-option {
      description "OPTION_USER_CLASS (15) User Class Option";
      reference "RFC8415: Dynamic Host Configuration Protocol
        for IPv6 (DHCPv6)";
      list user-class-data {
        key user-class-datum-id;
        min-elements 1;
        description "The user classes of which the client
          is a member.";
        leaf user-class-datum-id {
          type uint8;
          description "User class datum ID";
        }
        leaf user-class-datum {
          type string;
          description "Opaque field representing a User Class
            of which the client is a member.";
        }
      }
    }
  }

  grouping vendor-class-option-group {
    container vendor-class-option {
      description "OPTION_VENDOR_CLASS (16) Vendor Class Option";
      reference "RFC8415: Dynamic Host Configuration Protocol
        for IPv6 (DHCPv6)";
      list vendor-class-option-instances {
        key enterprise-number;
        description "The vendor class option allows for multiple
          instances in a single message. Each list entry defines
          the contents of an instance of the option.";
        leaf enterprise-number {
          type uint32;
          description "The vendor's registered Enterprise Number
            as maintained by IANA.";
        }
        list vendor-class {
          key vendor-class-datum-id;
          description "The vendor classes of which the client is 
            a member.";
          leaf vendor-class-datum-id {
            type uint8;
            description "Vendor class datum ID";
          }
          leaf vendor-class-datum {
            type string;
            description "Opaque field representing a vendor class
              of which the client is a member.";
          }
        }
      }
    }
  }

  grouping vendor-specific-information-option-group {
    container vendor-specific-information-option {
      description "OPTION_VENDOR_OPTS (17) Vendor-specific
        Information Option";
      reference "RFC8415: Dynamic Host Configuration Protocol
        for IPv6 (DHCPv6)";
      list vendor-specific-information-option-instances {
        key enterprise-number;
        description "The vendor specific information option allows
          for multiple instances in a single message. Each list entry
            defines the contents of an instance of the option.";
        leaf enterprise-number {
          type uint32;
          description "The vendor's registered Enterprise Number,
                      as maintained by IANA.";
        }
        list vendor-option-data {
          key sub-option-code;
          description "Vendor options, interpreted by vendor-specific
            client/server functions.";
          leaf sub-option-code {
            type uint16;
            description "The code for the sub-option.";
          }
          leaf sub-option-data {
            type string;
            description "The data area for the sub-option.";
          }
        }
      }
    }
  }

  grouping reconfigure-accept-option-group {
    container reconfigure-accept-option {
      presence "Enable sending of this option";
      description "OPTION_RECONF_ACCEPT (20)  Reconfigure Accept 
        Option.
        A client uses the Reconfigure Accept option to announce to 
        the server whether the client is willing to accept
        Reconfigure messages, and a server uses this option to tell
        the client whether or not to accept Reconfigure messages.
        In the absence of this option, the default behavior is that
        the client is unwilling to accept Reconfigure messages.
        The presence node is used to enable the option.";
      reference "RFC8415: Dynamic Host Configuration Protocol
        for IPv6 (DHCPv6)";
    }
  }

  /*
   * Augmentations
   */

  augment "/dhcpv6-client:dhcpv6-client/dhcpv6-client:client-if/dhcpv
6-client:client-configured-options" {
    when "../../../dhcpv6-client:dhcpv6-node-type='dhcpv6-client:clie
nt'";
    uses option-request-option-group;
    uses status-code-option-group;
    uses rapid-commit-option-group;
    uses user-class-option-group;
    uses vendor-class-option-group;
    uses vendor-specific-information-option-group;
    uses reconfigure-accept-option-group;
  }
}
<CODE ENDS>]]>
</artwork>
      </section>
      <section anchor="common-module">
        <name>DHCPv6 Common YANG Module</name>
        <t>This module imports typedefs from <xref target="RFC6991"/>.
        </t>
        <artwork align="center" xml:base="/home/if/Documents/yang/ietf-dhcpv6-common.yang.xml">
<![CDATA[<CODE BEGINS> file "ietf-dhcpv6-common.yang" 

module ietf-dhcpv6-common {
  yang-version 1.1;
  namespace "urn:ietf:params:xml:ns:yang:ietf-dhcpv6-common";
  prefix "dhcpv6-common";

  import ietf-yang-types {
    prefix yang;
    reference
      "RFC 6991: Common YANG Data Types";
  }

  organization "DHC WG";
  contact
    "yong@csnet1.cs.tsinghua.edu.cn
    lh.sunlinh@gmail.com
    ian.farrer@telekom.de
    sladjana.zechlin@telekom.de
    hezihao9512@gmail.com";

  description "This YANG module defines common components 
    used for the configuration and management of DHCPv6.";

  revision 2020-12-01 {
    description "Version update for draft -12 publication.";
    reference "I-D: draft-ietf-dhc-dhcpv6-yang-12";
  }

  revision 2020-05-26 {
    description "Version update for draft -11 publication and
      to align revisions across the different modules.";
    reference "I-D: draft-ietf-dhc-dhcpv6-yang-11";
  }

  revision 2018-09-04 {
    description "";
    reference "I-D: draft-ietf-dhc-dhcpv6-yang";
  }

  revision 2018-01-30 {
    description "Initial revision";
    reference "I-D: draft-ietf-dhc-dhcpv6-yang";
  }

  typedef threshold {
    type union {
      type uint16 {
        range 0..100;
      }
      type enumeration {
        enum "disabled" {
          description "No threshold";
        }
      }
    }
    description "Threshold value in percent";
  }

  typedef timer-seconds32 {
    type uint32 {
      range "1..4294967295";
    }
    units "seconds";
    description
      "Timer value type, in seconds (32-bit range).";
  }

  identity dhcpv6-node {
    description "Abstract base type for DHCPv6 functional nodes";
  }

  /*
   * Groupings
   */

  grouping duid {
    description "Each server and client has only one DUID (DHCP 
      Unique Identifier). The DUID here identifies a unique 
      DHCPv6 server for clients.  DUID consists of a two-octet 
      type field and an arbitrary length (no more than 128 bytes) 
      content field.  Currently there are four defined types of 
      DUIDs in RFC8415 and RFC6355 - DUID-LLT, DUID-EN, DUID-LL 
      and DUID-UUID.  DUID-unstructured represents DUIDs which 
      do not follow any of the defined formats.";
    reference "RFC8415: Section 11 and RFC6355: Section 4";
    leaf type-code {
      type uint16;
      default 65535;
      description "Type code of this DUID.";
    }
    choice duid-type {
      default duid-unstructured;
      description "Selects the format of the DUID.";
      case duid-llt {
        description "DUID Based on Link-layer Address Plus Time
          (Type 1 - DUID-LLT).";
        reference "RFC8415 Section 11.2";
        leaf duid-llt-hardware-type {
          type uint16;
          description "Hardware type as assigned by IANA (RFC826).";
        }
        leaf duid-llt-time {
          type yang:timeticks;
          description "The time that the DUID is generated 
            represented in seconds since midnight (UTC), 
            January 1, 2000, modulo 2^32.";
        }
        leaf duid-llt-link-layer-address {
          type yang:mac-address;
          description "Link-layer address as described in RFC2464.";
        }
      }
      case duid-en {
        description "DUID Assigned by Vendor Based on Enterprise
          Number (Type 2 - DUID-EN).";
        reference "RFC8415 Section 11.3";
        leaf duid-en-enterprise-number {
          type uint32;
          description "Vendor's registered Private Enterprise Number
            as maintained by IANA.";
        }
        leaf duid-en-identifier {
          type string;
          description "Identifier, unique to the device.";
        }
      }
      case duid-ll {
        description "DUID Based on Link-layer Address 
          (Type 3 - DUID-LL).";
        reference "RFC8415 Section 11.4";
        leaf duid-ll-hardware-type {
          type uint16;
          description "Hardware type, as assigned by IANA (RFC826).";
        }
        leaf duid-ll-link-layer-address {
          type yang:mac-address;
          description "Link-layer address, as described in RFC2464";
        }
      }
      case duid-uuid {
        description "DUID Based on Universally Unique Identifier
          (Type 4 - DUID-UUID).";
        reference "RFC6335 Definition of the UUID-Based Unique
          Identifier";
        leaf uuid {
          type yang:uuid;
          description "A Universally Unique Identifier in the string
            representation, defined in RFC4122. The canonical
            representation uses lowercase characters.";
        }
      }
      case duid-unstructured {
        description "DUID which does not follow any of the other
          structures, expressed as bytes.";
        leaf data {
          type binary;
          description "The bits to be used as the identifier.";
        }
      }
    }
    leaf active-duid {
      config "false";
      description "The DUID which is currently in use.";
      type binary;
    }
  }
}
<CODE ENDS>]]>
</artwork>
      </section>
    </section>
    <section anchor="security">
      <name>Security Considerations</name>
      <t>The YANG modules defined in this document are designed to be
        accessed via network management protocols such as NETCONF 
        <xref target="RFC6241"/> or RESTCONF <xref target="RFC8040"/>.
        The lowest NETCONF layer is the secure transport layer, and 
        the mandatory-to-implement secure transport is Secure Shell 
        (SSH) <xref target="RFC6242"/>.  The lowest RESTCONF layer 
        is HTTPS, and the mandatory-to-implement secure transport 
        is TLS <xref target="RFC8446"/>.</t>
      <t>The Network Configuration Access Control Model (NACM) 
        <xref target="RFC8341"/> provides the means to restrict 
        access for particular NETCONF or RESTCONF users to a 
        preconfigured subset of all available NETCONF or RESTCONF 
        protocol operations and content.</t>
      <t>All data nodes defined in the YANG modules which can be 
        created, modified, and deleted (i.e., config true, which 
        is the default) are considered sensitive.  Write operations 
        (e.g., edit-config) to these data nodes without proper 
        protection can have a negative effect on network operations. 
      </t>
      <t>As the RPCs for deleting/clearing active address and prefix
        entries in the server and relay modules are particularly
        sensitive, these use 'nacm:default-deny-all'.
      </t>
      <t>An attacker who is able to access the DHCPv6 server can 
        undertake various attacks, such as:</t>
      <ul spacing="normal">
        <li>Denial of service attacks, based on re-configuring 
          messages to a rogue DHCPv6 server.
        </li>
        <li>Various attacks based on re-configuring the contents
          of DHCPv6 options. E.g., changing the address of a
          the DNS server supplied in a DHCP option to point
          to a rogue server.
        </li>
      </ul>
      <t>An attacker who is able to access the DHCPv6 relay can 
        undertake various attacks, such as:</t>
      <ul spacing="normal">
        <li>Re-configuring the relay's destination address to send
          messages to a rogue DHCPv6 server.
        </li>
        <li>Deleting information about a client's delegated 
          prefix, causing a denial of service attack as traffic 
          will no longer be routed to the client.
        </li>
      </ul>
      <t>Some of the readable data nodes in this YANG module may 
        be considered sensitive or vulnerable in some network 
        environments.  It is thus important to control read access 
        (e.g., via get, get-config, or notification) to these data 
        nodes.  These subtrees and data nodes can be misused to 
        track the activity of a host:</t>
      <ul spacing="normal">
        <li>Re-configuring the relay's destination address to send
          messages to a rogue DHCPv6 server.
        </li>
        <li>Information the server holds about clients with active 
          leases: (dhcpv6-server/network-ranges/network-range/
          address-pools/address-pool/active-leases)
        </li>
        <li>Information the relay holds about clients with active 
          leases: (dhcpv6-relay/relay-if/prefix-delegation/)
        </li>
      </ul>
      <t>Security considerations related to DHCPv6 are discussed in 
        <xref target="RFC8415"/>.</t>
      <t>Security considerations given in <xref target="RFC7950"/> are 
        also applicable here.
      </t>
    </section>
    <section anchor="iana">
      <name>IANA Considerations</name>
      <t>This document registers the following YANG modules in the "YANG
        Module Names" registry <xref target="RFC6020"/>.</t>
      <dl newline="false" spacing="compact" indent="16">
        <dt>name:</dt>
        <dd>ietf-dhcpv6</dd>
        <dt>namespace:</dt>
        <dd>urn:ietf:params:xml:ns:yang:ietf-dhcpv6-common</dd>
        <dt>prefix:</dt>
        <dd>dhcpv6</dd>
        <dt>reference:</dt>
        <dd>TBD</dd>
      </dl>
      <dl newline="false" spacing="compact" indent="16">
        <dt>name:</dt>
        <dd>ietf-dhcpv6</dd>
        <dt>namespace:</dt>
        <dd>urn:ietf:params:xml:ns:yang:ietf-dhcpv6-server</dd>
        <dt>prefix:</dt>
        <dd>dhcpv6</dd>
        <dt>reference:</dt>
        <dd>TBD</dd>
      </dl>
      <dl newline="false" spacing="compact" indent="16">
        <dt>name:</dt>
        <dd>ietf-dhcpv6</dd>
        <dt>namespace:</dt>
        <dd>urn:ietf:params:xml:ns:yang:ietf-dhcpv6-client</dd>
        <dt>prefix:</dt>
        <dd>dhcpv6</dd>
        <dt>reference:</dt>
        <dd>TBD</dd>
      </dl>
      <dl newline="false" spacing="compact" indent="16">
        <dt>name:</dt>
        <dd>ietf-dhcpv6</dd>
        <dt>namespace:</dt>
        <dd>urn:ietf:params:xml:ns:yang:ietf-dhcpv6-relay</dd>
        <dt>prefix:</dt>
        <dd>dhcpv6</dd>
        <dt>reference:</dt>
        <dd>TBD</dd>
      </dl>
      <dl newline="false" spacing="compact" indent="16">
        <dt>name:</dt>
        <dd>ietf-dhcpv6</dd>
        <dt>namespace:</dt>
        <dd>urn:ietf:params:xml:ns:yang:ietf-dhcpv6-options-rfc8415-server</dd>
        <dt>prefix:</dt>
        <dd>dhcpv6</dd>
        <dt>reference:</dt>
        <dd>TBD</dd>
      </dl>
      <dl newline="false" spacing="compact" indent="16">
        <dt>name:</dt>
        <dd>ietf-dhcpv6</dd>
        <dt>namespace:</dt>
        <dd>urn:ietf:params:xml:ns:yang:ietf-dhcpv6-options-rfc8415-relay</dd>
        <dt>prefix:</dt>
        <dd>dhcpv6</dd>
        <dt>reference:</dt>
        <dd>TBD</dd>
      </dl>
      <dl newline="false" spacing="compact" indent="16">
        <dt>name:</dt>
        <dd>ietf-dhcpv6</dd>
        <dt>namespace:</dt>
        <dd>urn:ietf:params:xml:ns:yang:ietf-dhcpv6-options-rfc8415-client</dd>
        <dt>prefix:</dt>
        <dd>dhcpv6</dd>
        <dt>reference:</dt>
        <dd>TBD</dd>
      </dl>
    </section>
    <section anchor="acknowledgments">
      <name>Acknowledgments</name>
      <t>The authors would like to thank Qi Sun, Lishan Li, Sladjana Zoric,
        Tomek Mrugalski, Marcin Siodelski, and Bing Liu for
        their valuable comments and contributions to this work.</t>
    </section>
    <section anchor="contributors">
      <name>Contributors</name>
      <t>The following individuals contributed to this effort:</t>
      <artwork><![CDATA[

        Hao Wang
        Tsinghua University
        Beijing 100084
        P.R. China
        Phone: +86-10-6278-5822
        Email: wangh13@mails.tsinghua.edu.cn

        Ted Lemon
        Nomium, Inc
        950 Charter St.
        Redwood City, CA 94043
        USA
        Email: Ted.Lemon@nomium.com

        Bernie Volz
        Cisco Systems, Inc.
        1414 Massachusetts Ave
        Boxborough, MA 01719
        USA
        Email: volz@cisco.com

        ]]></artwork>
    </section>
  </middle>
  <back>
    <references>
      <name>References</name>
      <references>
        <name>Normative References</name>
        <reference anchor="RFC2119" target="https://www.rfc-editor.org/info/rfc2119" xml:base="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2119.xml">
          <front>
            <title>Key words for use in RFCs to Indicate Requirement Levels</title>
            <author initials="S." surname="Bradner" fullname="S. Bradner">
              <organization/>
            </author>
            <date year="1997" month="March"/>
            <abstract>
              <t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized. This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="14"/>
          <seriesInfo name="RFC" value="2119"/>
          <seriesInfo name="DOI" value="10.17487/RFC2119"/>
        </reference>
        <reference anchor="RFC6355" target="https://www.rfc-editor.org/info/rfc6355" xml:base="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6355.xml">
          <front>
            <title>Definition of the UUID-Based DHCPv6 Unique Identifier (DUID-UUID)</title>
            <author initials="T." surname="Narten" fullname="T. Narten">
              <organization/>
            </author>
            <author initials="J." surname="Johnson" fullname="J. Johnson">
              <organization/>
            </author>
            <date year="2011" month="August"/>
            <abstract>
              <t>This document defines a new DHCPv6 Unique Identifier (DUID) type called DUID-UUID.  DUID-UUIDs are derived from the already-standardized Universally Unique IDentifier (UUID) format.  DUID-UUID makes it possible for devices to use UUIDs to identify themselves to DHC servers and vice versa.  UUIDs are globally unique and readily available on many systems, making them convenient identifiers to leverage within DHCP.  [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="6355"/>
          <seriesInfo name="DOI" value="10.17487/RFC6355"/>
        </reference>
        <reference anchor="RFC6020" target="https://www.rfc-editor.org/info/rfc6020" xml:base="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6020.xml">
          <front>
            <title>YANG - A Data Modeling Language for the Network Configuration Protocol (NETCONF)</title>
            <author initials="M." surname="Bjorklund" fullname="M. Bjorklund" role="editor">
              <organization/>
            </author>
            <date year="2010" month="October"/>
            <abstract>
              <t>YANG is a data modeling language used to model configuration and state data manipulated by the Network Configuration Protocol (NETCONF), NETCONF remote procedure calls, and NETCONF notifications. [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="6020"/>
          <seriesInfo name="DOI" value="10.17487/RFC6020"/>
        </reference>
        <reference anchor="RFC6241" target="https://www.rfc-editor.org/info/rfc6241" xml:base="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6241.xml">
          <front>
            <title>Network Configuration Protocol (NETCONF)</title>
            <author initials="R." surname="Enns" fullname="R. Enns" role="editor">
              <organization/>
            </author>
            <author initials="M." surname="Bjorklund" fullname="M. Bjorklund" role="editor">
              <organization/>
            </author>
            <author initials="J." surname="Schoenwaelder" fullname="J. Schoenwaelder" role="editor">
              <organization/>
            </author>
            <author initials="A." surname="Bierman" fullname="A. Bierman" role="editor">
              <organization/>
            </author>
            <date year="2011" month="June"/>
            <abstract>
              <t>The Network Configuration Protocol (NETCONF) defined in this document provides mechanisms to install, manipulate, and delete the configuration of network devices.  It uses an Extensible Markup Language (XML)-based data encoding for the configuration data as well as the protocol messages.  The NETCONF protocol operations are realized as remote procedure calls (RPCs).  This document obsoletes RFC 4741.  [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="6241"/>
          <seriesInfo name="DOI" value="10.17487/RFC6241"/>
        </reference>
        <reference anchor="RFC6242" target="https://www.rfc-editor.org/info/rfc6242" xml:base="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6242.xml">
          <front>
            <title>Using the NETCONF Protocol over Secure Shell (SSH)</title>
            <author initials="M." surname="Wasserman" fullname="M. Wasserman">
              <organization/>
            </author>
            <date year="2011" month="June"/>
            <abstract>
              <t>This document describes a method for invoking and running the Network Configuration Protocol (NETCONF) within a Secure Shell (SSH) session as an SSH subsystem.  This document obsoletes RFC 4742.  [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="6242"/>
          <seriesInfo name="DOI" value="10.17487/RFC6242"/>
        </reference>
        <reference anchor="RFC6991" target="https://www.rfc-editor.org/info/rfc6991" xml:base="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6991.xml">
          <front>
            <title>Common YANG Data Types</title>
            <author initials="J." surname="Schoenwaelder" fullname="J. Schoenwaelder" role="editor">
              <organization/>
            </author>
            <date year="2013" month="July"/>
            <abstract>
              <t>This document introduces a collection of common data types to be used with the YANG data modeling language.  This document obsoletes RFC 6021.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="6991"/>
          <seriesInfo name="DOI" value="10.17487/RFC6991"/>
        </reference>
        <reference anchor="RFC7950" target="https://www.rfc-editor.org/info/rfc7950" xml:base="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7950.xml">
          <front>
            <title>The YANG 1.1 Data Modeling Language</title>
            <author initials="M." surname="Bjorklund" fullname="M. Bjorklund" role="editor">
              <organization/>
            </author>
            <date year="2016" month="August"/>
            <abstract>
              <t>YANG is a data modeling language used to model configuration data, state data, Remote Procedure Calls, and notifications for network management protocols.  This document describes the syntax and semantics of version 1.1 of the YANG language.  YANG version 1.1 is a maintenance release of the YANG language, addressing ambiguities and defects in the original specification.  There are a small number of backward incompatibilities from YANG version 1.  This document also specifies the YANG mappings to the Network Configuration Protocol (NETCONF).</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7950"/>
          <seriesInfo name="DOI" value="10.17487/RFC7950"/>
        </reference>
        <reference anchor="RFC8174" target="https://www.rfc-editor.org/info/rfc8174" xml:base="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.8174.xml">
          <front>
            <title>Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words</title>
            <author initials="B." surname="Leiba" fullname="B. Leiba">
              <organization/>
            </author>
            <date year="2017" month="May"/>
            <abstract>
              <t>RFC 2119 specifies common key words that may be used in protocol  specifications.  This document aims to reduce the ambiguity by clarifying that only UPPERCASE usage of the key words have the  defined special meanings.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="14"/>
          <seriesInfo name="RFC" value="8174"/>
          <seriesInfo name="DOI" value="10.17487/RFC8174"/>
        </reference>
        <reference anchor="RFC8040" target="https://www.rfc-editor.org/info/rfc8040" xml:base="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.8040.xml">
          <front>
            <title>RESTCONF Protocol</title>
            <author initials="A." surname="Bierman" fullname="A. Bierman">
              <organization/>
            </author>
            <author initials="M." surname="Bjorklund" fullname="M. Bjorklund">
              <organization/>
            </author>
            <author initials="K." surname="Watsen" fullname="K. Watsen">
              <organization/>
            </author>
            <date year="2017" month="January"/>
            <abstract>
              <t>This document describes an HTTP-based protocol that provides a programmatic interface for accessing data defined in YANG, using the datastore concepts defined in the Network Configuration Protocol (NETCONF).</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8040"/>
          <seriesInfo name="DOI" value="10.17487/RFC8040"/>
        </reference>
        <reference anchor="RFC8340" target="https://www.rfc-editor.org/info/rfc8340" xml:base="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.8340.xml">
          <front>
            <title>YANG Tree Diagrams</title>
            <author initials="M." surname="Bjorklund" fullname="M. Bjorklund">
              <organization/>
            </author>
            <author initials="L." surname="Berger" fullname="L. Berger" role="editor">
              <organization/>
            </author>
            <date year="2018" month="March"/>
            <abstract>
              <t>This document captures the current syntax used in YANG module tree diagrams.  The purpose of this document is to provide a single location for this definition.  This syntax may be updated from time to time based on the evolution of the YANG language.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="215"/>
          <seriesInfo name="RFC" value="8340"/>
          <seriesInfo name="DOI" value="10.17487/RFC8340"/>
        </reference>
        <reference anchor="RFC8341" target="https://www.rfc-editor.org/info/rfc8341" xml:base="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.8341.xml">
          <front>
            <title>Network Configuration Access Control Model</title>
            <author initials="A." surname="Bierman" fullname="A. Bierman">
              <organization/>
            </author>
            <author initials="M." surname="Bjorklund" fullname="M. Bjorklund">
              <organization/>
            </author>
            <date year="2018" month="March"/>
            <abstract>
              <t>The standardization of network configuration interfaces for use with the Network Configuration Protocol (NETCONF) or the RESTCONF protocol requires a structured and secure operating environment that promotes human usability and multi-vendor interoperability.  There is a need for standard mechanisms to restrict NETCONF or RESTCONF protocol access for particular users to a preconfigured subset of all available NETCONF or RESTCONF protocol operations and content.  This document defines such an access control model.</t>
              <t>This document obsoletes RFC 6536.</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="91"/>
          <seriesInfo name="RFC" value="8341"/>
          <seriesInfo name="DOI" value="10.17487/RFC8341"/>
        </reference>
        <reference anchor="RFC8342" target="https://www.rfc-editor.org/info/rfc8342" xml:base="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.8342.xml">
          <front>
            <title>Network Management Datastore Architecture (NMDA)</title>
            <author initials="M." surname="Bjorklund" fullname="M. Bjorklund">
              <organization/>
            </author>
            <author initials="J." surname="Schoenwaelder" fullname="J. Schoenwaelder">
              <organization/>
            </author>
            <author initials="P." surname="Shafer" fullname="P. Shafer">
              <organization/>
            </author>
            <author initials="K." surname="Watsen" fullname="K. Watsen">
              <organization/>
            </author>
            <author initials="R." surname="Wilton" fullname="R. Wilton">
              <organization/>
            </author>
            <date year="2018" month="March"/>
            <abstract>
              <t>Datastores are a fundamental concept binding the data models written in the YANG data modeling language to network management protocols such as the Network Configuration Protocol (NETCONF) and RESTCONF. This document defines an architectural framework for datastores based on the experience gained with the initial simpler model, addressing requirements that were not well supported in the initial model.  This document updates RFC 7950.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8342"/>
          <seriesInfo name="DOI" value="10.17487/RFC8342"/>
        </reference>
        <reference anchor="RFC8343" target="https://www.rfc-editor.org/info/rfc8343" xml:base="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.8343.xml">
          <front>
            <title>A YANG Data Model for Interface Management</title>
            <author initials="M." surname="Bjorklund" fullname="M. Bjorklund">
              <organization/>
            </author>
            <date year="2018" month="March"/>
            <abstract>
              <t>This document defines a YANG data model for the management of network interfaces.  It is expected that interface-type-specific data models augment the generic interfaces data model defined in this document. The data model includes definitions for configuration and system state (status information and counters for the collection of statistics).</t>
              <t>The YANG data model in this document conforms to the Network Management Datastore Architecture (NMDA) defined in RFC 8342.</t>
              <t>This document obsoletes RFC 7223.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8343"/>
          <seriesInfo name="DOI" value="10.17487/RFC8343"/>
        </reference>
        <reference anchor="RFC8446" target="https://www.rfc-editor.org/info/rfc8446" xml:base="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.8446.xml">
          <front>
            <title>The Transport Layer Security (TLS) Protocol Version 1.3</title>
            <author initials="E." surname="Rescorla" fullname="E. Rescorla">
              <organization/>
            </author>
            <date year="2018" month="August"/>
            <abstract>
              <t>This document specifies version 1.3 of the Transport Layer Security (TLS) protocol.  TLS allows client/server applications to communicate over the Internet in a way that is designed to prevent eavesdropping, tampering, and message forgery.</t>
              <t>This document updates RFCs 5705 and 6066, and obsoletes RFCs 5077, 5246, and 6961.  This document also specifies new requirements for TLS 1.2 implementations.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8446"/>
          <seriesInfo name="DOI" value="10.17487/RFC8446"/>
        </reference>
        <reference anchor="RFC8415" target="https://www.rfc-editor.org/info/rfc8415" xml:base="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.8415.xml">
          <front>
            <title>Dynamic Host Configuration Protocol for IPv6 (DHCPv6)</title>
            <author initials="T." surname="Mrugalski" fullname="T. Mrugalski">
              <organization/>
            </author>
            <author initials="M." surname="Siodelski" fullname="M. Siodelski">
              <organization/>
            </author>
            <author initials="B." surname="Volz" fullname="B. Volz">
              <organization/>
            </author>
            <author initials="A." surname="Yourtchenko" fullname="A. Yourtchenko">
              <organization/>
            </author>
            <author initials="M." surname="Richardson" fullname="M. Richardson">
              <organization/>
            </author>
            <author initials="S." surname="Jiang" fullname="S. Jiang">
              <organization/>
            </author>
            <author initials="T." surname="Lemon" fullname="T. Lemon">
              <organization/>
            </author>
            <author initials="T." surname="Winters" fullname="T. Winters">
              <organization/>
            </author>
            <date year="2018" month="November"/>
            <abstract>
              <t>This document describes the Dynamic Host Configuration Protocol for IPv6 (DHCPv6): an extensible mechanism for configuring nodes with network configuration parameters, IP addresses, and prefixes. Parameters can be provided statelessly, or in combination with stateful assignment of one or more IPv6 addresses and/or IPv6 prefixes.  DHCPv6 can operate either in place of or in addition to stateless address autoconfiguration (SLAAC).</t>
              <t>This document updates the text from RFC 3315 (the original DHCPv6 specification) and incorporates prefix delegation (RFC 3633), stateless DHCPv6 (RFC 3736), an option to specify an upper bound for how long a client should wait before refreshing information (RFC 4242), a mechanism for throttling DHCPv6 clients when DHCPv6 service is not available (RFC 7083), and relay agent handling of unknown messages (RFC 7283).  In addition, this document clarifies the interactions between models of operation (RFC 7550).  As such, this document obsoletes RFC 3315, RFC 3633, RFC 3736, RFC 4242, RFC 7083, RFC 7283, and RFC 7550.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8415"/>
          <seriesInfo name="DOI" value="10.17487/RFC8415"/>
        </reference>
      </references>
      <references>
        <name>Informative References</name>
        <reference anchor="RFC3319" target="https://www.rfc-editor.org/info/rfc3319" xml:base="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.3319.xml">
          <front>
            <title>Dynamic Host Configuration Protocol (DHCPv6) Options for Session Initiation Protocol (SIP) Servers</title>
            <author initials="H." surname="Schulzrinne" fullname="H. Schulzrinne">
              <organization/>
            </author>
            <author initials="B." surname="Volz" fullname="B. Volz">
              <organization/>
            </author>
            <date year="2003" month="July"/>
          </front>
          <seriesInfo name="RFC" value="3319"/>
          <seriesInfo name="DOI" value="10.17487/RFC3319"/>
        </reference>
      </references>
    </references>
    <section anchor="example-dhcp-options-extension">
      <name>Example of Augmenting Additional DHCPv6 Option Definitions</name>
      <t>The following section provides a example of how the DHCPv6 option 
        definitions can be extended for additional options. It is 
        expected that additional specification documents will be 
        published in the future for this.
      </t>
      <t>The example defines YANG models for OPTION_SIP_SERVER_D (21) 
        and OPTION_SIP_SERVER_D (22) defined in <xref target="RFC3319"/>. 
        The overall structure is as follows:</t>
      <ul spacing="normal">
        <li>A separate grouping is used for each option.
        </li>
        <li>The name of the option is taken from the registered IANA 
          name for the option, with an '-option' suffix added.
        </li>
        <li>The description field is taken from the relevant option code 
          name and number.
        </li>
        <li>The reference section is the number and name of the RFC in 
          which the DHCPv6 option is defined.
        </li>
        <li>The remaining fields match the fields in the DHCP option. 
          They are in the same order as defined in the DHCP option. 
          Where-ever possible, the format that is defined for the DHCP 
          field should be matched by the relevant YANG type.
        </li>
        <li>Fields which can have multiple entries or instances are 
          defined using list or leaf-list nodes.
        </li>
      </ul>
      <t>Below the groupings for option definitions, augment statements 
        are used to add the option definitions for use in the relevant 
        DHCP element's module (server, relay and/or client). If an 
        option is relevant to more than one element type, then an 
        augment statement for each element is used.
      </t>
      <artwork align="center" xml:base="/home/if/Documents/yang/example-dhcpv6-options-rfc3319-server.yang.xml">
<![CDATA[<CODE BEGINS> file "example-dhcpv6-options-rfc3319-server.yang" 

module example-dhcpv6-options-rfc3319 {
  yang-version 1.1;
  namespace "urn:ietf:params:xml:ns:yang:example-dhcpv6-options-rfc33
19";
  prefix "rfc3319";

  import ietf-inet-types {
    prefix inet;
  }

  import ietf-dhcpv6-server {
    prefix dhcpv6-server;
  }

  organization "DHC WG";
  contact
    "ian.farrer@telekom.de
    godfryd@isc.org";

  description "This YANG module contains DHCPv6 options defined
    in RFC3319 that can be used by DHCPv6 servers.";

  revision 2020-12-01 {
    description "Version update for draft -12 publication.";
    reference "I-D: draft-ietf-dhc-dhcpv6-yang-12";
  }

  revision 2020-05-26 {
    description "Version update for draft -11 publication and
      to align revisions across the different modules.";
    reference "I-D: draft-ietf-dhc-dhcpv6-yang-11";
  }

  revision 2019-10-18 {
    description "Initial version.";
    reference "I-D: draft-ietf-dhc-dhcpv6-yang";
  }

  /*
   * Groupings
   */

  grouping sip-server-domain-name-list-option-group {
    container sip-server-domain-name-list-option {
      description "OPTION_SIP_SERVER_D (21) SIP Servers Domain Name
        List";
      reference "RFC3319: Dynamic Host Configuration Protocol
        (DHCPv6) Options for Session Initiation Protocol (SIP)
        Servers";
      list sip-server {
        key sip-serv-id;
        description "sip server info";
        leaf sip-serv-id {
          type uint8;
          description "sip server id";
        }
        leaf sip-serv-domain-name {
          type inet:domain-name;
          description "sip server domain name";
        }
      }
    }
  }

  grouping sip-server-address-list-option-group {
    container sip-server-address-list-option {
      description "OPTION_SIP_SERVER_A (22) SIP Servers IPv6 Address
        List";
      reference "RFC3319: Dynamic Host Configuration Protocol
        (DHCPv6) Options for Session Initiation Protocol (SIP)
        Servers";
      list sip-server {
        key sip-serv-id;
        description "sip server info";
        leaf sip-serv-id {
          type uint8;
          description "sip server id";
        }
        leaf sip-serv-addr {
          type inet:ipv6-address;
          description "sip server addr";
        }
      }
    }
  }

  /*
   * Augmentations
   */

  augment "/dhcpv6-server:dhcpv6-server/dhcpv6-server:option-sets/dhc
pv6-server:option-set" {
    when "../../../dhcpv6-server:dhcpv6-node-type='dhcpv6-server:serv
er'";
    uses sip-server-domain-name-list-option-group;
    uses sip-server-address-list-option-group;
  }
}
<CODE ENDS>]]>
</artwork>
      <t>The correct location to augment the new option definition(s)
        will vary according to the specific rules defined for the 
        use of that specific option. E.g. for options which will
        be augmented into the ietf-dhcpv6-server module, in many
        cases, these will be augmented to:</t>
      <t>'/dhcpv6-server:dhcpv6-server/dhcpv6-server:option-sets/\
        dhcpv6-server:option-set'</t>
      <t>
        so that they can be defined within option sets. However,
        there are some options which are only applicable for 
        specific deployment scenarios and in these cases it may be
        more logical to augment the option group to a location 
        relevant for the option.</t>
      <t>One example for this could be OPTION_PD_EXCLUDE (67). This
        option is only relevant in combination with a delegated 
        prefix which contains a specific prefix. In this case, the
        following location for the augmentation may be more suitable:
      </t>
      <t>'/dhcpv6-server:dhcpv6-server/dhcpv6-server:network-ranges/\
        dhcpv6-server:network-range/dhcpv6-server:prefix-pools/\
        dhcpv6-server:prefix-pool"
      </t>
    </section>
    <section anchor="vendor-specific-configuration-example">
      <name>Example Vendor Specific Server Configuration Module</name>
      <t>
        This section shows how to extend the server YANG module defined 
        in this document with vendor specific configuration nodes, e.g., 
        configuring access to a lease storage database.</t>
      <t>The example module defines additional server attributes such 
        as name and description. Storage for leases is configured using 
        a lease-storage container. It allows storing leases in one of
        three options: memory (memfile), MySQL and PosgreSQL. For each 
        case, the necessary configuration parameters are provided.</t>
      <t>At the end there is an augment statement which adds the vendor 
        specific configuration defined in "dhcpv6-server-config:config" 
        under '/dhcpv6-server:config/dhcpv6-server:vendor-config' 
        mount point.
      </t>
      <artwork align="center" xml:base="/home/if/Documents/yang/example-dhcpv6-server-config.yang.xml">
<![CDATA[<CODE BEGINS> file "example-dhcpv6-server-config.yang" 

module example-dhcpv6-server-config {
  yang-version 1.1;
  namespace "urn:ietf:params:xml:ns:yang:example-dhcpv6-server-config
";
  prefix "dhcpv6-server-config";

  import ietf-inet-types {
    prefix inet;
  }

  import ietf-interfaces {
    prefix if;
  }

  import ietf-dhcpv6-server {
    prefix dhcpv6-server;
  }

  organization "DHC WG";
  contact
    "cuiyong@tsinghua.edu.cn
    lh.sunlinh@gmail.com
    ian.farrer@telekom.de
    sladjana.zechlin@telekom.de
    hezihao9512@gmail.com";

  description "This YANG module defines components for the 
    configuration and management of vendor/implementation specific 
    DHCPv6 server functionality. As this functionality varies 
    greatly between different implementations, the module 
    provided as an example only.";

  revision 2020-12-01 {
    description "Version update for draft -12 publication.";
    reference "I-D: draft-ietf-dhc-dhcpv6-yang-12";
  }

  revision 2020-05-26 {
    description "Version update for draft -11 publication and
      to align revisions across the different modules.";
    reference "I-D: draft-ietf-dhc-dhcpv6-yang-11";
  }

  revision 2019-06-04 {
    description "";
    reference "I-D: draft-ietf-dhc-dhcpv6-yang";
  }

  /*
   * Groupings
   */

  grouping config {
    description "Parameters necessary for the configuration of a 
      DHCPv6 server";
    container serv-attributes {
      description "Contains basic attributes necessary for running a 
        DHCPv6 server.";
      leaf name {
        type string;
        description "Name of the DHCPv6 server.";
      }
      leaf description {
        type string;
        description "Description of the DHCPv6 server.";
      }
      leaf ipv6-listen-port {
        type uint16;
        default 547;
        description "UDP port that the server will listen on.";
      }
      choice listening-interfaces {
        default all-interfaces;
        description "Configures which interface or addresses the 
          server will listen for incoming messages on.";
        case all-interfaces {
          container all-interfaces {
          presence true;
          description "Configures the server to listen for 
            incoming messages on all IPv6 addresses (unicats and
            multicast) on all of its network interfaces.";
          }
        }
        case interface-list {
          leaf-list interfaces {
            type if:interface-ref;
            description "List of interfaces that the server will
              listen for incoming messages on. Messages addressed
              to any valid IPv6 address (unicast and multicast) will
              be received.";
          }
        }
        case address-list {
          leaf-list address-list {
            type inet:ipv6-address;
            description "List of IPv6 address(es) that the server 
              will listen for incoming messages on.";
          }
        }
      }
      leaf-list interfaces-config {
        type if:interface-ref; 
        default "if:interfaces/if:interface/if:name";
        description "A leaf list to denote which one or more
          interfaces the server should listen on.";
      }
      container lease-storage {
        description "Configures how the server will stores leases.";
        choice storage-type {
          description "The type storage that will be used for lease 
            information.";
          case memfile {
            description "Configuration for storing leases information
              in a CSV file.";
            leaf memfile-name {
              type string;
              description "Specifies the absolute location
                of the lease file. The format of the string follow
                the semantics of the relevant operating system.";
            }
            leaf memfile-lfc-interval {
              type uint64;
              description "Specifies the interval in seconds,
                at which the server will perform a lease file cleanup
                (LFC).";
            }
          }
          case mysql {
            leaf mysql-name {
              type string;
              description "Name of the database.";
            }
            choice mysql-host {
              case mysql-server-hostname { 
                leaf mysql-hostname {
                  type inet:domain-name;
                  default "localhost";
                  description "If the database is located on a 
                    different system to the DHCPv6 server, the 
                      domain name can be specified.";
                }
              }
              case mysql-server-address {
                leaf mysql-address {
                  type inet:ip-address;
                  default "::";
                  description "Configure the location of the 
                    database using an IP (v6 or v6) literal 
                    address";
                }
              }
            }
            leaf mysql-username {
              type string;
              description "User name of the account under which the
                server will access the database.";
            }
            leaf mysql-password {
              type string;
              description "Password of the account under which
                the server will access the database.";
            }
            leaf mysql-port {
              type inet:port-number;
              default 5432;
              description "If the database is located on a different
                system, the port number may be specified.";
            }
            leaf mysql-lfc-interval {
              type uint64;
              description "Specifies the interval in seconds,
                at which the server will perform a lease file cleanup
                (LFC).";
            }
            leaf mysql-connect-timeout {
              type uint64;
              description "Defines the timeout interval for 
                connecting to the database. A longer interval can 
                be specified if the database is remote.";
            }
          }
          case postgresql {
            choice postgresql-host {
              case postgresql-server-hostname {
                leaf postgresql-hostname {
                  type inet:domain-name;
                  default "localhost";
                  description "If the database is located on a 
                    different system to the DHCPv6 server, the 
                    domain name can be specified.";
                }
              }
              case postgresql-server-address {
                leaf postgresql-address {
                  type inet:ip-address;
                  default "::";
                  description "Configure the location of the database
                    using an IP (v6 or v6) literal address";
                }
              }
            }
            leaf postgresql-username {
              type string;
              description "User name of the account under which
                the server will access the database";
            }
            leaf postgresql-password {
              type string;
              description "Password of the account under which
                the server will access the database";
            }
            leaf postgresql-port {
              type inet:port-number;
              default 5432;
              description "If the database is located on a different
                system, the port number may be specified";
            }
            leaf postgresql-lfc-interval {
              type uint64;
              description "Specifies the interval in seconds,
                at which the server will perform a lease file cleanup
                (LFC)";
            }
            leaf postgresql-connect-timeout {
              type uint64;
              description "Defines the timeout interval for 
                connecting to the database. A longer interval can 
                be specified if the database is remote.";
            }
          }
        }
      }
    }
  }

  /*
   * Augmentations
   */

  augment "/dhcpv6-server:dhcpv6-server/dhcpv6-server:vendor-config" 
{
    uses dhcpv6-server-config:config;
  }
}
<CODE ENDS>]]>
</artwork>
    </section>
    <section anchor="class-selector-example">
      <name>Example definition of class selector configuration</name>
      <t>
        The module "example-dhcpv6-class-selector" provides an example 
        of how vendor specific class selection configuration can be 
        modelled and integrated with the "ietf-dhcpv6-server" module 
        defined in this document.</t>
      <t>The example module defines "client-class-names" with associated
        matching rules. A client can be classified based on "client-id",
        "interface-id" (ingress interface of the client's messages),
        packets source or destination address, relay link address,
        relay link interface-id and more. Actually, there are endless 
        methods for classifying clients. So this standard does not try 
        to provide full specification for class selection, it only shows
        an example how it can be defined.</t>
      <t>At the end of the example augment statements are used to add 
        the defined class selector rules into the overall DHCPv6 
        addressing hierarchy. This is done in two main parts:</t>
      <ul spacing="normal">
        <li>The augmented class-selector configuration in the main
          DHCPv6 Server configuration.
        </li>
        <li>client-class leafrefs augmented to "network-range", 
          "address-pool" and "pd-pool", pointing to the 
          "client-class-name" that is required.
        </li>
      </ul>
      <t>The mechanism is as follows: class is associated to client 
        based on rules and then client is allowed to get 
        address(es)/prefix(es) from given network-range/pool if the 
        class name matches.
      </t>
      <artwork align="center" xml:base="/home/if/Documents/yang/example-dhcpv6-class-selector.yang.xml">
<![CDATA[<CODE BEGINS> file "example-dhcpv6-class-selector.yang" 

module example-dhcpv6-class-selector {
  yang-version 1.1;
  namespace "urn:ietf:params:xml:ns:yang:example-dhcpv6-class-selecto
r";
  prefix "dhcpv6-class-selector";

  import ietf-inet-types {
    prefix inet;
  }

  import ietf-interfaces {
    prefix if;
  }

  import ietf-dhcpv6-common {
    prefix dhcpv6-common;
  }

  import ietf-dhcpv6-server {
    prefix dhcpv6-server;
  }

  organization "DHC WG";
  contact
    "yong@csnet1.cs.tsinghua.edu.cn
    lh.sunlinh@gmail.com
    ian.farrer@telekom.de
    sladjana.zechlin@telekom.de
    hezihao9512@gmail.com";

  description "This YANG module defines components for the definition
    and configuration of the client class selector function for a 
    DHCPv6 server.  As this functionality varies greatly between 
    different implementations, the module provided as an example 
    only.";

  revision 2020-12-01 {
    description "Version update for draft -12 publication.";
    reference "I-D: draft-ietf-dhc-dhcpv6-yang-12";
  }
  
  revision 2020-05-26 {
    description "Version update for draft -11 publication and
      to align revisions across the different modules.";
    reference "I-D: draft-ietf-dhc-dhcpv6-yang-11";
  }

  revision 2019-06-13 {
    description "";
    reference "I-D: draft-ietf-dhc-dhcpv6-yang";
  }

  /*
   * Groupings
   */

  grouping client-class-id {
    description "Definitions of client message classification for
      authorization and assignment purposes.";
    leaf client-class-name {
      type string;
      description "Unique Identifier for client class identification
        list entries.";
    }
    choice id-type {
      description "Definitions for different client identifier
        types.";
      mandatory true;
      case client-id-id {
        description "Client class selection based on a string literal
          client identifier.";
        leaf client-id {
          description "String literal client identifier.";
          mandatory true;
          type string;
        }
      }
      case received-interface-id {
        description "Client class selection based on the incoming
          interface of the DHCPv6 message.";
        leaf received-interface {
          description "Reference to the interface entry
            for the incoming DHCPv6 message.";
          type if:interface-ref;
        }
      }
      case packet-source-address-id {
        description "Client class selection based on the source
          address of the DHCPv6 message.";
        leaf packet-source-address {
          description "Source address of the DHCPv6 message.";
          mandatory true;
          type inet:ipv6-address;
        }
      }
      case packet-destination-address-id {
        description "Client class selection based on the destination
          address of the DHCPv6 message.";
        leaf packet-destination-address {
          description "Destination address of the DHCPv6 message.";
          mandatory true;
          type inet:ipv6-address;
        }
      }
      case relay-link-address-id {
        description "Client class selection based on the prefix
          of the link-address field in the relay agent message
          header.";
        leaf relay-link-address {
          description "Prefix of the link-address field in the relay
            agent message header.";
          mandatory true;
          type inet:ipv6-prefix;
        }
      }
      case relay-peer-address-id {
        description "Client class selection based on the value of the
          peer-address field in the relay agent message header.";
        leaf relay-peer-address {
          description "Prefix of the peer-address field
            in the relay agent message header.";
          mandatory true;
          type inet:ipv6-prefix;
        }
      }
      case relay-interface-id {
        description "Client class selection based on the incoming
          interface-id option.";
        leaf relay-interface {
          description "Reference to the interface entry
            for the incoming DHCPv6 message.";
          type string;
        }
      }
      case user-class-option-id {
        description "Client class selection based on the value of the
          OPTION_USER_CLASS(15) and its user-class-data field.";
        leaf user-class-data {
          description "Value of the enterprise-number field.";
          mandatory true;
          type string;
        }
      }
      case vendor-class-present-id {
        description "Client class selection based on the presence of
          OPTION_VENDOR_CLASS(16) in the received message.";
        leaf vendor-class-present {
          description "Presence of OPTION_VENDOR_CLASS(16)
            in the received message.";
          mandatory true;
          type boolean;
        }
      }
      case vendor-class-option-enterprise-number-id {
        description "Client class selection based on the value of the
          enterprise-number field in OPTION_VENDOR_CLASS(16).";
        leaf vendor-class-option-enterprise-number {
          description "Value of the enterprise-number field.";
          mandatory true;
          type uint32;
        }
      }
      case vendor-class-option-data-id {
        description "Client class selection based on the value
          of a data field within a vendor-class-data entry
          for a matching enterprise-number field
          in OPTION_VENDOR_CLASS(16).";
        container vendor-class-option-data {
          leaf vendor-class-option-enterprise-number {
            description "Value of the enterprise-number field
              for matching the data contents.";
            mandatory true;
            type uint32;
          }
          leaf vendor-class-data {
            description "Vendor class data to match.";
            mandatory true;
            type string;
          }
        }
      }
      case remote-id {
        description "Client class selection based on the value
          of Remote-ID .";
        container remote-id {
          leaf vendor-class-option-enterprise-number {
            description "Value of the enterprise-number field
              for matching the data contents.";
            mandatory true;
            type uint32;
          }
          leaf remote-id {
            description "Remote-ID data to match.";
            mandatory true;
            type string;
          }
        }
      }
      case client-duid-id {
        description "Client class selection based on the value
          of the received client DUID.";
        uses dhcpv6-common:duid;
      }
    }
  }

  /*
   * Augmentations 
   */

  augment "/dhcpv6-server:dhcpv6-server/dhcpv6-server:class-selector"
 {
    container client-classes {
      list class {
        description "List of the client class identifiers applicable
          to clients served by this address pool";
        key client-class-name;
        uses dhcpv6-class-selector:client-class-id;
      }
    }
  }

  augment "/dhcpv6-server:dhcpv6-server/dhcpv6-server:network-ranges/
dhcpv6-server:network-range" {
    leaf-list client-class {
      type leafref {
        path "/dhcpv6-server:dhcpv6-server/dhcpv6-server:class-select
or/client-classes/class/client-class-name";
      }
    }
  }

  augment "/dhcpv6-server:dhcpv6-server/dhcpv6-server:network-ranges/
dhcpv6-server:network-range/dhcpv6-server:address-pools/dhcpv6-server
:address-pool" {
    leaf-list client-class {
      type leafref {
        path "/dhcpv6-server:dhcpv6-server/dhcpv6-server:class-select
or/client-classes/class/client-class-name";
      }
    }
  }

  augment "/dhcpv6-server:dhcpv6-server/dhcpv6-server:network-ranges/
dhcpv6-server:network-range/dhcpv6-server:prefix-pools/dhcpv6-server:
prefix-pool" {
    leaf-list client-class {
      type leafref {
        path "/dhcpv6-server:dhcpv6-server/dhcpv6-server:class-select
or/client-classes/class/client-class-name";
      }
    }
  }
}
<CODE ENDS>]]>
</artwork>
    </section>
  </back>
</rfc>
