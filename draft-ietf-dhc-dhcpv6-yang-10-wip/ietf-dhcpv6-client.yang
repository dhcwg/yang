module ietf-dhcpv6-client {
  yang-version 1.1;
  namespace "urn:ietf:params:xml:ns:yang:ietf-dhcpv6-client";
  prefix "dhcpv6-client";

  import ietf-dhcpv6-common {
    prefix dhcpv6-common;
  }

  import ietf-interfaces {
    prefix if;
  }

  organization "DHC WG";
  contact
    "cuiyong@tsinghua.edu.cn
    wangh13@mails.tsinghua.edu.cn
    lh.sunlinh@gmail.com
    ian.farrer@telekom.de
    sladjana.zechlin@telekom.de
    hezihao9512@gmail.com
    godfryd@isc.org";

  description "This is a YANG data module for the configuration and management
    of DHCPv6 clients.

    Copyright (c) 2018 IETF Trust and the persons identified as
    authors of the code.  All rights reserved.

    Redistribution and use in source and binary forms, with or
    without modification, is permitted pursuant to, and subject
    to the license terms contained in, the Simplified BSD License
    set forth in Section 4.c of the IETF Trust's Legal Provisions
    Relating to IETF Documents
    (http://trustee.ietf.org/license-info).

    This version of this YANG module is part of RFC 8513; see
    the RFC itself for full legal notices.";

  revision 2018-09-04 {
    description "";
    reference "I-D: draft-ietf-dhc-dhcpv6-yang";
  }

  revision 2018-03-04 {
    description "Resolved most issues on the DHC official
      github";
    reference "I-D: draft-ietf-dhc-dhcpv6-yang";
  }

  revision 2017-12-22 {
    description "Resolve most issues on Ian's github.";
    reference "I-D: draft-ietf-dhc-dhcpv6-yang";
  }

  revision 2017-11-24 {
    description "First version of the separated client specific
      YANG model.";
    reference "I-D: draft-ietf-dhc-dhcpv6-yang";
  }

  identity client {
    base "dhcpv6-common:dhcpv6-node";
    description "DHCPv6 client.";
  }

  leaf dhcpv6-node-type {
    description "Type for a DHCPv6 client";
    type identityref {
      base "dhcpv6-client:client";
    }
  }

  /*
   * Groupings
   */

  grouping if-leases {
    container client-configured-options {
      description "Definitions for DHCPv6 options that can be be sent by the
        client are augmented to this location from other YANG modules as
        required.";
    }
    list ia-na {
      key iaid;
      description "Configuration relevant for an IA_NA.";
      reference "RFC8415: Dynamic Host Configuration Protocol for IPv6 
        (DHCPv6)";
      leaf iaid {
        type uint32;
        description "The unique identifier for this IA_NA.";
      }
      container ia-na-options {
        description "An augmenation point for additional options that the
          client will send in the IA_NA-options field of OPTION_IA_NA
          options.";
      }
      container lease-state {
        config "false";
        description "Information about the active IA_NA lease";
        leaf ia-na-address {
        description "Address that is currently leased.";
          type inet:ipv6-address;
        }
        leaf last-renew {
          description "Time of the last successful refresh or renew of the
            leased address.";
          type yang:date-and-time;
        }
        leaf server-duid {
          description "DUID of the leasing server.";
          type binary;
        }
      }
      uses lease-stats;
    }
    list ia-ta {
      key iaid;
      description "Configuration relevant for an IA_TA.";
      reference "RFC8415: Dynamic Host Configuration Protocol for IPv6 
        (DHCPv6)";        
        leaf iaid {
          type uint32;
          description "The unique identifier for this IA_TA.";
        }
      container ia-ta-options {
        description "An augmenation point for additional options that the
          client will send in the IA_TA-options field of OPTION_IA_TA
          options.";
      }
      container lease-state {
        config "false";
        description "Information about the active IA_TA lease";
        leaf ia-ta-address {
        description "Address that is currently leased.";
          type inet:ipv6-address;
        }
        leaf last-renew {
          description "Time of the last successful refresh or renew of the
            leased address.";
          type yang:date-and-time;
        }
        leaf server-duid {
          description "DUID of the leasing server.";
          type binary;
        }
      }
      uses lease-stats;
    }
    list ia-pd {
      key iaid;
      reference "RFC8415: Dynamic Host Configuration Protocol for IPv6 
        (DHCPv6)";
      description "Configuration relevant for an IA_PD.";
      leaf iaid {
        type uint32;
        description "The unique identifier for this IA_PD.";
      }
      container ia-pd-options {
        description "An augmenation point for additional options that the
          client will send in the IA_PD-options field of OPTION_IA_TA
          options.";
      }
      container lease-state {
        config "false";
        description "Information about the active IA_PD delegate prefix.";
        leaf ia-pd-prefix {
        description "Delegated prefix that is currently leased.";
          type inet:ipv6-prefix;
        }
        leaf last-renew {
          description "Time of the last successful refresh or renew of the
            delegated prefix.";
          type yang:date-and-time;
        }
        leaf server-duid {
          description "DUID of the delegating server.";
          type binary;
        }
      }
      uses lease-stats;
    }
  }

  grouping lease-stats {
    description "Contains counters for DHCPv6 lease messages.";
    leaf solicit-count {
      config "false";
      type uint32;
      description "Number of solicit messages sent.";
    }
    leaf request-count {
      config "false";
      type uint32;
      description "Number of request messages sent.";
    }
    leaf renew-count {
      config "false";
      type uint32;
      description "Number of renew messages sent.";
    }
    leaf rebind-count {
      config "false";
      type uint32;
      description "Number of rebind messages sent.";
    }
    leaf decline-count {
      config "false";
      type uint32;
      description "Number of decline messages sent.";
    }
    leaf release-count {
      type uint32;
      description "Number of release messages sent.";
    }
    leaf advertise-count {
      config "false";
      type uint32;
      description "Number of rebind messages received.";
    }
    leaf confirm-count {
      config "false";
      type uint32;
      description "Number of confirm messages sent.";
    }
    leaf reply-count {
      config "false";
      type uint32;
      description "Number of reply messages received.";
    }
    leaf reconfigure-count {
      config "false";
      type uint32;
      description "Number of reconfigure messages received.";
    }
  }

  /*
   * Data Nodes
   */

  container dhcpv6-client {
    description "DHCPv6 client configuration and state.";
    list client-if {
      key if-name;
      description "The list of interfaces that the client will be 
        requesting DHCPv6 configuration for.";
      leaf if-name {
        type if:interface-ref;
        mandatory true;
        description "Reference to the interface entry that the requested
          configuration is relevant to.";
      }
      uses dhcpv6-common:duid;
      uses if-leases;
    }
  }

  /*
   * Notifications
   */

  notification ia-lease-event {
    description "An event is generated when the client is allocated a new IA by
      a the server or a current IA is renewed, rebound or released";
    leaf event-type {
      type enumeration {
        description "Type of event.";
        enum "allocation" {
          description "allocate";
        }
        enum "rebind" {
          description "rebind";
        }
        enum "renew" {
          description "renew";
        }
        enum "release" {
          description "release";
        }
      }
      mandatory true;
    }
    leaf iaid {
      type uint32;
      mandatory true;
      description "IAID for this lease.";
    }
    container server-duid {
      description "DUID of the leasing server.";
      type binary;
    }
  }

  notification invalid-ia-detected {
    description "Raised when the identity association of the
      client can be proved to be invalid.  Possible condition
      includes duplicated address, illegal address, etc.";
    leaf iaid {
      type uint32;
      mandatory true;
      description "IAID";
    }
    leaf description {
      type string;
      description "Description of the event.";
    }
  }

  notification retransmission-failed {
    description "Raised when the retransmission mechanism defined in 
      [RFC8415] is unsucessful.";
    leaf failure-type {
      type enumeration {
        enum "MRC-exceeded" {
          description "Maximum retransmission count exceeded.";
        }
        enum "MRD-exceeded" {
          description "Maximum retransmission duration exceeded.";
        }
      }
      mandatory true;
      description "Description of the failure";
    }
  }

  notification unsuccessful-status-code {
    description "Raised when the client receives a message that includes
      an unsuccessful Status Code option.";
    leaf status-code {
      type uint16;
      mandatory true;
      description "Unsuccessful status code recevied by a client";
    }
    container duid {
      description "DUID of the server sending the unsuccessful error code.";
      type binary;
    }
  }
}
