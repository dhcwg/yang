<?xml version='1.0' encoding='utf-8'?>
<?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
<?rfc strict="yes" ?>
<?rfc toc="yes"?>
<?rfc tocdepth="4"?>
<?rfc symrefs="yes"?>
<?rfc sortrefs="yes" ?>
<?rfc compact="yes" ?>
<?rfc subcompact="no" ?>
<!DOCTYPE rfc SYSTEM "rfc2629-xhtml.ent">
<rfc xmlns:xi="http://www.w3.org/2001/XInclude" category="std" docName="draft-ietf-dhc-dhcpv6-yang-10" ipr="trust200902" version="3">
  <!-- xml2rfc v2v3 conversion 2.30.0 -->
  <front>
    <title abbrev="DHCPv6 YANG Model">YANG Data Model for DHCPv6 Configuration</title>
    <seriesInfo name="Internet-Draft" value="draft-ietf-dhc-dhcpv6-yang-10"/>
    <author fullname="Yong Cui" initials="Y." surname="Cui">
      <organization>Tsinghua University</organization>
      <address>
        <postal>
          <street/>
          <city>Beijing</city>
          <code>100084</code>
          <country>P.R.China</country>
        </postal>
        <phone>+86-10-6260-3059</phone>
        <email>cuiyong@tsinghua.edu.cn</email>
      </address>
    </author>
    <author fullname="Linhui Sun" initials="L." surname="Sun">
      <organization>Tsinghua University</organization>
      <address>
        <postal>
          <street/>
          <city>Beijing</city>
          <code>100084</code>
          <country>P.R.China</country>
        </postal>
        <phone>+86-10-6278-5822</phone>
        <email>lh.sunlinh@gmail.com</email>
      </address>
    </author>
    <author fullname="Ian Farrer" initials="I.F" surname="Farrer">
      <organization>Deutsche Telekom AG</organization>
      <address>
        <postal>
          <street>CTO-ATI, Landgrabenweg 151</street>
          <city>Bonn</city>
          <region>NRW</region>
          <code>53227</code>
          <country>Germany</country>
        </postal>
        <email>ian.farrer@telekom.de</email>
      </address>
    </author>
    <author fullname="Sladjana Zechlin" initials="S.Z" surname="Zechlin">
      <organization>Deutsche Telekom AG</organization>
      <address>
        <postal>
          <street>CTO-IPT, Landgrabenweg 151</street>
          <city>Bonn</city>
          <region>NRW</region>
          <code>53227</code>
          <country>Germany</country>
        </postal>
        <email>sladjana.zechlin@telekom.de</email>
      </address>
    </author>
    <author fullname="Zihao He" initials="Z." surname="He">
      <organization>Tsinghua University</organization>
      <address>
        <postal>
          <street/>
          <city>Beijing</city>
          <code>100084</code>
          <country>P.R.China</country>
        </postal>
        <phone>+86-10-6278-5822</phone>
        <email>hezihao9512@gmail.com</email>
      </address>
    </author>
    <author fullname="Michal Nowikowski" initials="M.N." surname="Nowikowski">
      <organization>Internet Systems Consortium</organization>
      <address>
        <postal>
          <street/>
          <city>Gdansk</city>
          <country>Poland</country>
        </postal>
        <email>godfryd@isc.org</email>
      </address>
    </author>
    <date year="2019"/>
    <workgroup>DHC Working Group</workgroup>
    <abstract>
      <t>This document describes several YANG data modules
        <xref target="RFC7950"/> for the configuration and management of DHCPv6
        servers, relays, and clients.</t>
    </abstract>
    <note>
      <name>Requirements Language</name>
      <t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
      "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
      document are to be interpreted as described in <xref target="RFC2119"/>
      .</t>
    </note>
  </front>
  <middle>
    <section anchor="introduction">
      <name>Introduction</name>
      <t>DHCPv6 <xref target="RFC8415"/> is widely used for supplying
        configuration and other relevant parameters to clients in IPv6 networks.
        This document defines DHCPv6 YANG data modules for the configuration
        and management of DHCPv6 servers, relays and clients.
      </t>
      <t>The included modules are broken down initially by the functional
        element they are intended for, so there are separate server, relay and
        client modules. A 'common' module has been created to contain groupings
        which are used by two more of the elements models. Likewise, a single
        module contains definitions for all of the configurable DHCP options.
      </t>
      <t>It is worth noting that as DHCPv6 is itself a client configuration
        protocol, it is not the intention of this document to replace the
        allocation of DHCPv6 assigned addressing and parameters using
        NETCONF/YANG.  The DHCPv6 client model is intended for the
        configuration of the DHCPv6 client function and also for obtaining
        DHCPv6 provisioned read-only state data from the client, learned via
        the normal DHCPv6 message flow. This gives the network operator
        better management and troubleshooting capabilities.
      </t>
      <section>
        <name>Scope</name>
        <t><xref target="RFC8415"/> describes the current version of the DHCPv6
        base protocol specification. In addition to this, a large number
        of additon specifications have also been published. These extend
        DHCPv6 element funciontionality and add new options. The YANG modules
        contained in this document do not attempt to capture all of these
        extensions and additions, rather to model the DHCPv6 functions and
        options covered in <xref target="RFC8415"/>. A focus has also been
        given on the extensability of the modules so that it is easy to
        augment in additional funtionality as required by a particular
        implementation or deployment scenario.
        </t>
        <t>The modules in this document only attempt to model DHCPv6 specific
        behaviour. They do not cover the configuration and management of
        specific DHCPv6 element's implementations. There is too much
        variance between implementations to be attempt to standardize these
        functions in a way that is useful without being restrictive.
        </t>
      </section>
      <section>
        <name>Extensibility</name>
        <t>However, it is recognised that implementation specific configuration
        and management is also an essential part of element deployment and
        operations. To resolve this, the Appendix of this document contains
        an example module for the configuration of implementation specfic
        funtions, illustrating how this functionality can be augemented into
        the main ietf-dhcpv6-server.yang module.
        </t>
        <t>In DHCPv6 the concept of 'class selection' for messaages received
        by the server is common. This is the identification of messages based on
        a number of parameters so that messages can be correctly identified and
        classified and the correct provisioning information can be supplied.
        For example,  taking a prefix from the correct pool, or supplying a set
        of options relevant for a specific vendor's client implementation.
        During the development of this document, research has been carried out
        into a number of vendor's class selection implementations and the
        findings were that while this function is common to all, the method for
        implementing this differs greatly. Therefore, this function has been
        ommitted from the DHCPv6 server module. The appendix provides an
        example module for the class selection function, intended to demonstrate
        how this is intended to integrate with the main
        ietf-dhcpv6-server.yang module.
        </t>
        <t>
        A large number of DHCPv6 options have been created in addition to
        those defined in <xref target="RFC8415"/>. As implementations differ
        in which specific DHCPv6 options that they support, the following
        approach has been taken to defining options: The set of DHCPv6
        options defined in <xref target="RFC8415"/> are included in this
        document. Further options can be added in new YANG modules via
        augmentation. The Appendixes provide an example of how this can be
        done.
        </t>
      </section>
      <section anchor="terminology">
        <name>Terminology</name>
        <t>The reader should be familiar with the YANG data modelling language
        defined in <xref target="RFC7950"/>.</t>
        <t>The YANG modules in this document adopt the Network Management
        Datastore Architecture (NMDA) <xref target="RFC8342"/>.  The meanings of
        the symbols used in tree diagrams are defined in
        <xref target="RFC8340"/>.</t>
        <t>The reader should be familiar with the terms defined in DHCPv6
          <xref target="RFC8415"/> and other relevant documents.</t>
      </section>
    </section>
    <section anchor="tree-diagram">
      <name>DHCPv6 Tree Diagram</name>
      <section anchor="dhcpv6-server-tree">
        <name>DHCPv6 Server Tree Diagrams</name>
        <figure anchor="structure">
          <name>DHCPv6 Data Model Structure</name>
            <xi:include href="../server/ietf-dhcpv6-server.yang.tree.xml"/>
        </figure>
        <t>Introduction of important nodes:</t>
        <ul spacing="normal">
          <li>server-config: This container contains the configuration data
            of a server.</li>
          <li>serv-attributes: This container contains basic attributes of a
            DHCPv6 server such as DUID, server name and so on. Some
            optional functions that can be provided by the server is also
            included.</li>
          <li>duid: Each server and client has only one DUID (DHCP Unique
            Identifier). The DUID here identifies a unique DHCPv6 server for
            clients. DUID consists of a two-octet type field and an arbitrary
            length (no more than 128 bytes) content field. Currently there are
            four defined types of DUIDs in <xref target="RFC8415"/> and
            <xref target="RFC6355"/> - DUID-LLT, DUID-EN, DUID-LL and
            DUID-UUID. DUID-Unknown represents those unconventional DUIDs.</li>
          <li>lease-storage: The server can store lease data in different repositories,
          whether in a CSV file for smaller deployments or in a database for larger deployments.
          </li>
          <li>operator-option-ipv6-address, operator-option-single-flag,
            operator-option-ipv6-prefix, operator-option-int32,
            operator-option-int16, operator-option-int8, operator-option-uri,
            operator-option-textstring, operator-option-var-data,
            operator-option-dns-wire: are generic option formats described in
            <xref target="RFC7227"/>.</li>
          <li>interfaces-config: A leaf list to denote which one or more
            interfaces the server should listen on. The default value is to
            listen on all the interfaces. This node is also used to set a
            unicast address for the server to listen with a specific interface.
            For example, if the server is being configured to listen on a
            unicast address assigned to a specific interface, the format
            "eth1/2001:db8::1" can be used.</li>
          <li>option-sets: DHCPv6 employs various options to carry additional
            information and parameters in DHCP messages. This container defines
            all the possible options that need to be configured at the server
            side. The relevant RFCs that define those options include:
            <xref target="RFC8415"/>, <xref target="RFC3319"/>,
            <xref target="RFC3646"/>, <xref target="RFC3898"/>,
            <xref target="RFC4242"/>, <xref target="RFC4704"/>,
            <xref target="RFC4833"/>, <xref target="RFC5908"/>,
            <xref target="RFC5970"/>, <xref target="RFC4075"/>,
            <xref target="RFC6334"/>, <xref target="RFC6784"/>,
            <xref target="RFC7078"/>, <xref target="RFC7083"/>,
            <xref target="RFC7291"/>, <xref target="RFC7598"/>.
          </li>
          <li>option-set: A server may allow different option sets to be
            configured for different conditions (i.e. different networks,
            clients and etc). This "option-set" list enables various sets of
            options being defined and configured in a single server. Different
            sets are distinguished by the key called "option-set-id". All the
            possible options discussed above are defined in the list and each
            option is corresponding to a container. Since all the options in
            the list are optional, each container in this list has a 'presence'
            statement to indicate whether this option (container) will be
            included in the current option set or not. In addition, each container
            also has a 'if-feature' statement to indicate whether the server
            supports this option (container).
          </li>
          <li>network-ranges: This model supports a hierarchy to achieve dynamic
            configuration. That is to say we could configure the server at
            different levels through this model. The top level is a global
            level which is defined as the container "network-ranges". The
            following levels are defined as sub-containers under it. The
            "network-ranges" contains the parameters (e.g. option-sets) that
            would be allocated to all the clients served by this server.
          </li>
          <li>network-range: Under the "network-ranges" container, a
            "network-range" list is defined to configure the server at a network
            level which is also considered as the second level. Different
            network are identified by the key "network-range-id". This is
            because a server may have different configuration parameters
            (e.g. option sets) for different networks.</li>
          <li>address-pools: Under the "network-range" list, a container
            describes the DHCPv6 server's address pools for a specific network
            is defined. This container supports the server to be configured at a
            pool level.
          </li>
          <li>address-pool: A DHCPv6 server can be configured with several
            address pools for a specific network. This list defines such address
            pools which are distinguish by the key called "pool-id".</li>
          <li>rapid-commit: Setting the value to 'true' represents the address/prefix
            pool support the Solicit-Reply message exchange. 'false' means the server
            will simply ignore the Rapid Commit option in Solicit message.</li>
          <li>client-class: If this is instantiated, the address/pd pool will only
            serve the clients belonging to this class.</li>
          <li>max-address-count: Maximum count of addresses that can be allocated in
            this pool. This value may be less than count of total addresses in
            this pool.</li>
          <li>prefix-pools: If a server supports prefix delegation function, this
            container under the "network-range" list will be valid to define the
            delegating router's prefix pools for a specific network. This
            container also supports the server to be configured at a pool level.
          </li>
          <li>prefix-pool: Similar to server's address pools, a delegating router
            can also be configured with multiple prefix pools specified by a
            list called "prefix-pool".</li>
          <li>max-pd-space-utilization: Maximum utilization of pd space in this pool.
          </li>
          <li>host-reservations: This container allows the server to make reservations
            at host level.</li>
          <li>host-reservation: This list allows the server to reserve addresses,
              prefixes, hostname and options for different clients. A server may
              reserve multiple addresses and prefixes for a single client.
          </li>
          <li>relay-opaque-params: This container contains some opaque values in
            Relay Agent options that need to be configured on the server side
            only for value match. Such Relay Agent options include Interface-Id
            option, Remote-Id option and Subscriber-Id option.</li>
          <li>rsoo-enabled-options: <xref target="RFC6422"/> requires that the
            server SHOULD have an administrator-configurable list of
            RSOO-enabled options. This container include a list called
            "rsoo-enabled-option" to allow new RSOO-enabled options to be
            defined at the server side.</li>
          <li>server-state: This container includes the state data of a server.</li>
          <li>binding-info: A list records a static binding information for each
            DHCPv6 client that has already been assigned IPv6 addresses/prefixes
            that are dynamically allocated and reserved in advance.</li>
          <li>packet-stats: A container presents the packet statistics related
            to the DHCPv6 server.</li>
        </ul>
        <t>Information about notifications:</t>
        <ul spacing="normal">
          <li>address/pd-pool-running-out: raised when the address/prefix pool
            is going to run out. A threshold for utilization ratio of the pool
            (max-address-count/max-pd-space utilization) has been defined in
            the server feature so that it will notify the administrator when the
            utilization ratio reaches the threshold, and such threshold is a
            settable parameter.
          </li>
          <li>invalid-client-detected: raised when the server has found a client
            which can be regarded as a potential attacker. Some description
            could also be included.
          </li>
        </ul>
      </section>
      <section anchor="dhcpv6-relay-tree">
        <name>DHCPv6 Relay Tree Diagrams</name>
        <xi:include href="../server/ietf-dhcpv6-relay.yang.tree.xml"/>

        <t>Introduction of important nodes:</t>
        <ul spacing="normal">
          <li>relay-config: This container contains the configuration data
            of the relay.</li>
          <li>relay-attributes: A container describes some basic attributes
            of the relay agent including some relay agent specific options
            data that need to be configured previously. Such options include
            Remote-Id option and Subscriber-Id option.</li>
          <li>dest-addrs: Each DHCPv6 relay agent may be configured with a
            list of destination addresses. This node defines such a list of
            IPv6 addresses that may include unicast addresses, multicast
            addresses or other addresses.</li>
          <li>rsoo-options-sets: DHCPv6 relay agent could provide
            some information that would be useful to DHCPv6 client. Since relay
            agent cannot provide options directly to the client,
            <xref target="RFC6422"/> defines RSOO-enabled options to propose
            options for the server to send to the client. This container
            models such RSOO-enabled options.</li>
          <li>option-set: This list under the "rsoo-option-sets" container
            is similar to the that defined in server module. It allows
            the relay to implement several sets of RSOO-enabled options
            for different interfaces. The list only include the EAP
            Re-authentication Protocol (ERP) Local Domain Name DHCPv6 Option
            defined in <xref target="RFC6440"/>, since it is the only one
            RSOO-enabled options accepted by IANA so far.</li>
          <li>relay-if: A relay agent may have several interfaces, we should
            provide a way to configure and manage parameters on the
            interface-level. A list that describes specific interfaces
            and their corresponding parameters is employed to fulfill the
            configuration. Here we use a string called "if-name" as the
            key of list.</li>
          <li>relay-state: This container contains the configuration data
            of the relay.</li>
          <li>pd-route: A sub-container of "relay-if" which describes the
            route for delegated prefixes into the provider edge router.</li>
          <li>next-entity: This node defines a list that is used to describe
            the next hop entity of this relay agent. Different entities are
            distinguished by their addresses.</li>
          <li>packet-stats: A container shows packet state information of a
            specific data communication.</li>
          <li>relay-stats: The "relay-stats" container records and presents the
            overall packet statistics of the relay agent.</li>
        </ul>
        <t>Information about notifications:</t>
        <ul spacing="normal">
          <li>topo-changed: raised when the topology of the relay agent is
            changed.
          </li>
        </ul>
      </section>
      <section anchor="dhcpv6-client-tree">
        <name>DHCPv6 Client Tree Diagrams</name>
        <xi:include href="../server/ietf-dhcpv6-client.yang.tree.xml"/>

        <t>Introduction of important nodes:</t>
        <ul spacing="normal">
          <li>client-config: This container includes the configuration data
            of the client.</li>
          <li>duid: Each server and client has only one DUID (DHCP Unique
            Identifier). The DUID here will be carried in the Client ID option
            to identify a specific DHCPv6 client. This leaf are same as the
            "duid" leaf in "dhcpv6-server" feature.</li>
          <li>client-if: A client may have several interfaces, it is more
            reasonable to configure and manage parameters on the interface-level.
            The list defines a specific client interface and its data. Different
            interfaces are distinguished by the "ifName" key which is a
            configurable string value.</li>
          <li>pd-function: Whether the client can act as a requesting router to
            request prefixes using prefix delegation (<xref target="RFC3633"/>).
          </li>
          <li>rapid-commit: 'true' indicates a client can initiate a Solicit-Reply
            message exchange by adding a Rapid Commit option in Solicit message.
            'false' means the client is not allowed to add a Rapid Commit option to
            request addresses in a two-message exchange pattern.</li>
          <li>client-configured-options: Similar to the server, the client also
            need to configure some options to fulfill some desired functions.
            This container include all the potential options that need to be
            configured at the client side. The relevant RFCs that define those
            options include: <xref target="RFC8415"/>, <xref target="RFC4704"/>,
            <xref target="RFC5970"/>, <xref target="RFC6784"/>,
            <xref target="RFC6939"/>.</li>
          <li>option-request-option: This container provide a way to configure
            the list of options that the client will request in its ORO option.</li>
          <li>client-state: This container includes the state data
          of the client.</li>
          <li>if-other-params: A client can obtain extra configuration data other
            than address and prefix information through DHCPv6 options. This
            container describes such data the client was configured through
            DHCPv6. The potential configuration data may include DNS server
            parameters, SIP server parameters and etc.</li>
          <li>packet-stats: A container records all the packet status information
            of a specific interface.</li>
        </ul>
        <t>Information about notifications:</t>
        <ul spacing="normal">
          <li>ia-lease-event: raised when the client was allocated a new IA
            from the server or it renew/rebind/release its current IA.
          </li>
          <li>invalid-ia-detected: raised when the identity association of the
            client can be proved to be invalid. Possible condition includes
            duplicated address, illegal address, etc.
          </li>
          <li>retransmission-failed: raised when the retransmission mechanism
            defined in <xref target="RFC8415"/> is failed.
          </li>
          <li>failed-status-turn-up: raised when the client receives a message
            includes an unsuccessful Status Code option.
          </li>
        </ul>
      </section>
    </section>
    <section anchor="yang-model">
      <name>DHCPv6 YANG Model</name>
      <section anchor="server-model">
        <name>DHCPv6 Server YANG Model</name>
        <t>This module imports typedefs from <xref target="RFC6991"/>,
        <xref target="RFC7223"/>.</t>
        <xi:include href="../server/ietf-dhcpv6-server.yang.xml"/>
      </section>
      <section anchor="relay-model">
        <name>DHCPv6 Relay YANG Model</name>
        <t>This module imports typedefs from <xref target="RFC6991"/>,
        <xref target="RFC7223"/>.
        </t>
        <xi:include href="../server/ietf-dhcpv6-relay.yang.xml"/>
      </section>
      <section anchor="client-model">
        <name>DHCPv6 Client YANG Model</name>
        <t>This module imports typedefs from <xref target="RFC6991"/>,
        <xref target="RFC7223"/>.</t>
        <xi:include href="../server/ietf-dhcpv6-client.yang.xml"/>
      </section>
      <section anchor="option-model">
        <name>DHCPv6 Options YANG Model</name>
        <t>This module imports typedefs from <xref target="RFC6991"/>,
        <xref target="RFC7223"/>.</t>
        <xi:include href="../server/ietf-dhcpv6-options-rfc8415.yang.xml"/>
      </section>
      <section anchor="type-model">
        <name>DHCPv6 Types YANG Model</name>
        <t>This module imports typedefs from <xref target="RFC6991"/>.</t>
        <xi:include href="../server/ietf-dhcpv6-common.yang.xml"/>
      </section>
    </section>
    <section anchor="appendix">
      <name>Appendix</name>
      <t>
      This appendix shows how to adapt YANG modules defined in this document for
      specific, vendor implementation of DHCP solution. It presents how to define
      a vendor specific configuration of DHCPv6 like location of database
      for storing leases or class selection rules. It also indicates
      mountpoints and their usage while extending standard configuration definition
      by augment statetment.
      </t>
      <section anchor="vendor-specific-configuration-example">
        <name>Vendor specific configuration example</name>
        <t>
        A module <em>example-dhcpv6-server-config</em> shows how to extended standard
        definition of DHCPv6 cofiguration with vendor specific elements.

        The example module defines additional server attributes like duid
        or name and description. Then it defines storage for leases in
        <em>lease-storage</em> conainer. It allows storing leases in one of three options:
        memfile, mysql and posgresql. For each case there are provided specific
        parameters.

        At the end there is an augment statment which places vendor specific
        configuration defined in "dhcpv6-server-config:config" under
        "/dhcpv6-server:config/dhcpv6-server:vendor-config" mountpoint.
        </t>
      </section>
      <section anchor="vendor-specific-configuration-example-yang">
        <name>Example DHCPv6 Server Config YANG Model</name>
        <xi:include href="../server/example-dhcpv6-server-config.yang.xml"/>
      </section>
      <section anchor="class-selector-example">
        <name>Example definition of class selector configuration</name>
        <t>
        A module <em>example-dhcpv6-class-selector</em> shows how to create a vendor
        specific class selector configuration definition for DHCPv6.

        The example module defines <em>client-class-name</em>s with associated
        matching rules. A client can be classified based on <em>client id</em>,
        <em>interface-id</em> which was used to receive client's packets,
        packets source or destination address, relay link address,
        relay link interface id and more. Actually there is endless methods
        for classifying clients. So this standard does not try to
        provide full specificiation for class selection, it only shows
        an example how it can be defined.

        At the end of this example there are presented augment statements
        that add:

        - class selector configuration to main part of DHCPv6 configuration
        - client-class leafref in <em>network-range</em>, <em>address-pool</em>
        and <em>pd-pool</em> that points to client-class-name which is required

        The mechanism is as follows: class is associated to client based on rules
        and then client is allowed to get address from given <em>network-range</em>
        or pool if class name matches.
        </t>
      </section>
      <section anchor="class-selector-example-yang">
        <name>Example Class Selector YANG Model</name>
        <xi:include href="../server/example-dhcpv6-class-selector.yang.xml"/>
      </section>
    </section>
    <section anchor="security">
      <name>Security Considerations (TBD)</name>
      <t>TBD</t>
    </section>
    <section anchor="iana">
      <name>IANA Considerations (TBD)</name>
      <t>This document registers the following YANG modules in the "YANG
   Module Names" registry <xref target="RFC6020"/>.</t>
      <dl newline="false" spacing="compact" indent="16">
        <dt>name:</dt>
        <dd>ietf-dhcpv6</dd>
        <dt>namespace:</dt>
        <dd>urn:ietf:params:xml:ns:yang:ietf-dhcpv6</dd>
        <dt>prefix:</dt>
        <dd>dhcpv6</dd>
        <dt>reference:</dt>
        <dd>TBD</dd>
      </dl>
    </section>
    <section anchor="acknowledgments">
      <name>Acknowledgments</name>
      <t>The authors would like to thank Qi Sun, Lishan Li, Sladjana Zoric,
        Tomek Mrugalski, Marcin Siodelski, Bernie Volz and Bing Liu for
        their valuable comments and contributions to this work.</t>
    </section>
    <section anchor="contributors">
      <name>Contributors</name>
      <artwork><![CDATA[
The following individuals contributed to this effort:
  Hao Wang
  Tsinghua University
  Beijing 100084
  P.R.China
  Phone: +86-10-6278-5822
  Email: wangh13@mails.tsinghua.edu.cn

]]></artwork>
      <artwork><![CDATA[
  Ted Lemon
  Nomium, Inc
  950 Charter St.
  Redwood City, CA 94043
  USA
  Email: Ted.Lemon@nomium.com

]]></artwork>
      <artwork><![CDATA[
  Bernie Volz
  Cisco Systems, Inc.
  1414 Massachusetts Ave
  Boxborough, MA 01719
  USA
  Email: volz@cisco.com

]]></artwork>
    </section>
  </middle>
  <back>
    <references>
      <name>References</name>
      <references>
        <name>Normative References</name>
        <xi:include href="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2119.xml"/>
        <xi:include href="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6355.xml"/>
        <xi:include href="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.3633.xml"/>
        <xi:include href="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6020.xml"/>
        <xi:include href="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6087.xml"/>
        <xi:include href="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6991.xml"/>
        <xi:include href="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7223.xml"/>
        <xi:include href="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7950.xml"/>
        <xi:include href="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.8340.xml"/>
        <xi:include href="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.8342.xml"/>
        <xi:include href="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.8415.xml"/>
      </references>
      <references>
        <name>Informative References</name>
        <xi:include href="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.3319.xml"/>
        <xi:include href="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.3646.xml"/>
        <xi:include href="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.3898.xml"/>
        <xi:include href="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.4242.xml"/>
        <xi:include href="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.4704.xml"/>
        <xi:include href="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.4833.xml"/>
        <xi:include href="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.5908.xml"/>
        <xi:include href="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.5970.xml"/>
        <xi:include href="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.4075.xml"/>
        <xi:include href="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6334.xml"/>
        <xi:include href="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6422.xml"/>
        <xi:include href="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6440.xml"/>
        <xi:include href="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6784.xml"/>
        <xi:include href="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6939.xml"/>
        <xi:include href="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7078.xml"/>
        <xi:include href="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7083.xml"/>
        <xi:include href="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7227.xml"/>
        <xi:include href="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7291.xml"/>
        <xi:include href="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7598.xml"/>
        <xi:include href="https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.draft-ietf-netmod-yang-tree-diagrams-06.xml"/>
      </references>
    </references>
    <section>
      <name>Example of Adding New DHCPv6 Option Definitions</name>
    </section>
    <section>
      <name>Example Vendor Specific Server Configuration Module</name>
    </section>
    <section>
      <name>Example Vendor Sepcific Client Class Selector Module</name>
    </section>
  </back>
</rfc>
